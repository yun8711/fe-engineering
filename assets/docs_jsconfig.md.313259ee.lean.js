import{_ as t,v as e,b as s,R as o}from"./chunks/framework.8277b2e6.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":false,"next":false},"headers":[],"relativePath":"docs/jsconfig.md","filePath":"docs/jsconfig.md","lastUpdated":1695401145000}'),a={name:"docs/jsconfig.md"},n=o('<h1>jsconfig.json</h1><p>2023-09-21</p><p><a href="jsconfig.json">官网</a> | <a href="https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio" target="_blank" rel="noreferrer">js语言服务</a></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><h3 id="什么是-jsonfig-json" tabindex="-1">什么是 jsonfig.json <a class="header-anchor" href="#什么是-jsonfig-json" aria-label="Permalink to &quot;什么是 jsonfig.json&quot;">​</a></h3><p>jsconfig.json 是从 Visual Studio 2017 年开始提供支持的，用于表示该目录是 js 项目的根目录，同时编辑器可以根据提供的选项提供语言服务，提升 js 编辑体验。</p><p>由于 vscode 是基于 ts 编写，所以它可以识别 tsconfig.json，并基于该配置提供 ts 语言相关支持。</p><p>同时，ts对 js 是完全支持的，所以在不使用 ts 的情况下，使用 jsconfig.json 提供某些配置，也可以让编辑器进行优化，提升编码体验。可以把 jsconfig.json 理解为 tsconfig.json 的 allowJs为 true 的配置文件。</p><h3 id="为什么需要-jsconfig-json" tabindex="-1">为什么需要 jsconfig.json <a class="header-anchor" href="#为什么需要-jsconfig-json" aria-label="Permalink to &quot;为什么需要 jsconfig.json&quot;">​</a></h3><p>没有 jsconfig.json的情况下，vscode 将 js 文件视为独立的单元，在没有显示的引用文件时，两个文件之间就没有公共的项目上下文，编辑器无法提供相应的代码提示。</p><p>使用 jsconfig.json 的情况下，通过该文件的配置定义，编辑器可以确定项目的根目录，并基于 TypeScript 的语言服务提供更丰富的 IntelliSense（智能感知），支持现代 JavaScript 功能，以及改进的生产力功能，如转到定义、重构等</p><p>详情查看：<a href="https://learn.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2022" target="_blank" rel="noreferrer">IntelliSense in Visual Studio</a></p><h2 id="常见配置" tabindex="-1">常见配置 <a class="header-anchor" href="#常见配置" aria-label="Permalink to &quot;常见配置&quot;">​</a></h2><p>jsconfig.json 配置项与 tsconfig.json 一致</p><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h3><p>glob 模式，用于排除某些文件，比如 node_modules、dist，应该尽可能排除包含 js 代码但又不属于源码的文件</p><blockquote><p>如果没有 jsconfig.json，vscode 默认排除 node_modules</p></blockquote><p>可以告诉语言服务哪些文件不属于源代码，这样可以保持较好的性能</p><h3 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h3><p>默认包含目录和子目录中的所有文件，在项目中显式设置包含哪些文件</p><h3 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h3><p>可以参考 tsconfig.json 的配置，以下是常用的配置项</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>noLib</td><td>不要包含默认库文件（lib.d.ts）</td></tr><tr><td>target</td><td>指定要使用的默认库，可选值：es3、es5、es6、es2015～2020、esnext</td></tr><tr><td>module</td><td>指定模块系统，可选：amd、commonJs、es2015、es6、esnext、none、system、umd</td></tr><tr><td>moduleResolution</td><td>指定模块解析方式，可选：node（推荐）、classic</td></tr><tr><td>chedkJs</td><td>是否对 js文件启用类型检查</td></tr><tr><td>experimentalDecorators</td><td>为建议的 ES 修饰器启用实验性支持</td></tr><tr><td>allowSyntheticDefaultImports</td><td>允许从没有默认导出的模块进行默认导入。这不会影响代码发出，只需进行类型检查。</td></tr><tr><td>baseUrl</td><td>用于解析非相对模块名称的基目录</td></tr><tr><td>paths</td><td>指定相对于 baseUrl 选项的路径映射，即路径别名</td></tr></tbody></table>',23),i=[n];function r(d,l,c,p,h,f){return e(),s("div",null,i)}const g=t(a,[["render",r]]);export{j as __pageData,g as default};
