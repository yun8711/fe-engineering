import{_ as a,v as e,b as t,R as s}from"./chunks/framework.8277b2e6.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":false},"headers":[],"relativePath":"docs/typescript/index.md","filePath":"docs/typescript/index.md","lastUpdated":1706944683000}'),l={name:"docs/typescript/index.md"},r=s('<h1>TypeScript</h1><p>v5.2（2023.08.26）</p><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">官网</a> | <a href="https://github.com/microsoft/TypeScript" target="_blank" rel="noreferrer">github</a> | <a href="https://typescript.bootcss.com/" target="_blank" rel="noreferrer">中文网</a> | <a href="http://www.patrickzhong.com/TypeScript/" target="_blank" rel="noreferrer">《TypeScript 入门与实战》</a></p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>由Microsoft公司开发的编程语言，在 JavaScript 的基础上添加了静态类型检查。</p><p>TypeScript 是 JavaScript 类型的超集，可以编译成纯 js。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><p>始于 js，归于 js：使用现有的 js 代码的语法和语义；可以编译出纯净、简洁的 js 代码，并可以运行在任何浏览器上、Nodejs 环境、任何支持ECMAScript 3（或更高版本）的JavaScript引擎中</p></li><li><p>强大的工具构建大型应用程序：类型系统提升了代码的静态验证，为开发者提供了高效的开发工具和常用操作，比如静态检查、代码重构</p></li><li><p>先进的 js：ts 提供最新的和不断发展的 js 特性，包括提案中的特性，这些特性在开发时可用，但会被编译成简洁的 ECMAScript3（或更新版本）的JavaScript</p></li></ul><h3 id="发展历程" tabindex="-1">发展历程 <a class="header-anchor" href="#发展历程" aria-label="Permalink to &quot;发展历程&quot;">​</a></h3><ul><li>2012 年 10 月：首个版本 0.8 推出，引入了 TypeScript 的基本概念，如静态类型检查和类型注解</li><li>2013 年 10 月：0.9 发布，带来了模块系统、泛型和枚举等新特性，增强了语言的功能</li><li>2014 年 4 月：1.0 正式发布，正式进入稳定版本，引入了类、接口，以及一些改进的工具和编译器性能</li><li>2015 年 10 月：1.6 发布，引入了异步生成器、装饰器等功能</li><li>2016 年 8 月：2.0 发布，带来了非空类型、标识联合类型、null 和 undefined 类型的改进支持等特性，使类型检查更加精确</li><li>2017 年 7 月：2.4 发布，引入了条件类型、全面的对象类型等，增强了类型系统的能力</li><li>2018 年 7 月：3.0 发布，引入了项目引用、只读属性、元组和类型扩展等功能，提高了代码组织和可维护性</li><li>2019 年 8 月：3.6 发布，添加了增强的枚举类型、生成器、更好的类型推断等功能</li><li>2020 年 8 月：4.0 发布，带来了变体元组类型、精确的联合类型检查、可选的短路条件类型等新特性</li><li>2021 年 8 月：4.4 发布，引入了特性如标签模板字符串类型、可选的静态 this 类型、类型安全的字符串操作等，提供更多工具来编写高质量的 TypeScript 代码</li><li>2023 年 3 月16日：5.0 发布，新增 const 类型参数；正式支持装饰器（注解）；支持 export type</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">typescript</span></span></code></pre></div><h3 id="使用-tsc" tabindex="-1">使用 tsc <a class="header-anchor" href="#使用-tsc" aria-label="Permalink to &quot;使用 tsc&quot;">​</a></h3><p>系统中安装 typescript（全局）后，就可以调用全局命令 tsc 对.ts 文件进行编译，比如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">tsc helloworld.ts</span></span></code></pre></div><h3 id="直接运行-ts-文件" tabindex="-1">直接运行 ts 文件 <a class="header-anchor" href="#直接运行-ts-文件" aria-label="Permalink to &quot;直接运行 ts 文件&quot;">​</a></h3><p>使用 <a href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noreferrer">ts-node</a>，可以不用编译直接运行 .ts 文件</p><h3 id="在工程中使用" tabindex="-1">在工程中使用 <a class="header-anchor" href="#在工程中使用" aria-label="Permalink to &quot;在工程中使用&quot;">​</a></h3><p>一般在工程中使用 ts 时，会创建一个 tsconfig.json 配置文件来更好的使用 ts。</p><p>可以手动复制一个，也可以使用 tsc --init 来自动初始化一个配置文件</p>',21),i=[r];function p(o,n,c,h,d,u){return e(),t("div",null,i)}const m=a(l,[["render",p]]);export{f as __pageData,m as default};
