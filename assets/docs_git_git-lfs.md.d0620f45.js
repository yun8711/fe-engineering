import{_ as s,v as a,b as l,R as n}from"./chunks/framework.8277b2e6.js";const t="/fe-engineering/assets/image_git-lfs.257b0eee.png",D=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/git/git-lfs.md","filePath":"docs/git/git-lfs.md","lastUpdated":1710175002000}'),p={name:"docs/git/git-lfs.md"},e=n('<h1>Git LFS</h1><p><a href="https://git-lfs.com/" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>Git 是业界流行的分布式版本控制工具，本地仓库与远端仓库同样保存了全量的文件和变更历史，这样让代码协作变得简单和高效。但也正因为如此，Git针对大型文件（例如图片、视频或其他二进制文件）的版本控制，也会存在一些问题，主要有两点：</p><ul><li>效率变慢：不管实际上用户是否使用到这些大文件的历史，都需要把每一个文件的每一个版本下载到本地仓库。毫无疑问，下载耗时的增加给用户带来了更多的等待时间。</li><li>空间变大：一个Git仓库存放的大型的文件越多，加之伴随着其关联提交不断增多，Git仓库会以非常快的速率膨胀，占用更多的磁盘空间。</li></ul><br><p>Git LFS（Git Large File Storage）是 Git 的一个扩展，旨在更<strong>有效地处理大型文件</strong>，它将音频、视频、数据集和图形等大型文件替换为 Git 中的文本指针（引用和元数据），同时将文件内容单独存储在远程服务器（如 GitHub.com 或 GitHub Enterprise）上。这使得Git仓库能够更快速地克隆、推送和拉取，同时有效地处理大型媒体文件、二进制文件等。</p><br><p><strong>优势和适用场景</strong></p><ul><li>更快的操作速度：由于只需处理文件的引用，Git LFS使得Git仓库的克隆、推送和拉取操作更加迅速</li><li>有效管理大型文件：对于大型媒体文件、二进制文件等，Git LFS提供了一种高效的版本控制方式，减小了仓库的体积。</li><li>团队协作：锁定文件的功能使得团队能够更好地协同工作，防止冲突</li></ul><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p><strong>普通场景</strong></p><p>不论是针对小型的代码文本文件、还是比较大型的图片文件，在相关变更从本地提交到远端仓库时，所有的相关文件资源都会完整的存储在git server。就图片中的例子而言，如果图片文件越来越多，改动频次越来越大，仓库的体积将极速膨胀起来。</p><br><p><strong>Git LFS 场景</strong></p><p>如下图所示，我们可以针对jpg图片使用Git LFS的存储能力，在push过程中将其上传至大文件存储服务。同时，大文件对应的指针文件将连同其他的普通的代码文件推送到远端Git仓库中。</p><p><img src="'+t+`" alt="image_git-lfs"></p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>以官网为准</p><p><strong>Windows</strong></p><p>目前lfs已经集成在了Git for Windows 中，直接下载和使用最新版本的Windows Git即可。</p><p><strong>mac</strong></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 下载</span></span>
<span class="line"><span style="color:#FFCB6B;">brew</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">git-lfs</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>也可以按照下面的方法安装</p><p><strong>Linux</strong></p><p>下载二进制包：<a href="https://link.zhihu.com/?target=https%3A//github.com/git-lfs/git-lfs/releases" target="_blank" rel="noreferrer">https://link.zhihu.com/?target=https%3A//github.com/git-lfs/git-lfs/releases</a></p><p>直接执行解压后的./install.sh脚本即可，这个脚本会做两个事情：</p><p>在$PATH中安装Git LFS的二进制可执行文件</p><p>执行<code>git lfs install</code>命令，让当前环境支持全局的LFS配置</p><h2 id="初始配置" tabindex="-1">初始配置 <a class="header-anchor" href="#初始配置" aria-label="Permalink to &quot;初始配置&quot;">​</a></h2><p>1、初始化</p><p>下载并安装 git lfs 后，执行以下命令，为帐户设置 Git LFS：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>每个用户帐户只需运行一次</p><br><p>2、设置跟踪大文件</p><p>在要使用 Git LFS 的 Git 存储库中，选择希望 Git LFS 管理的文件类型，执行以下命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">track</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.zip</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>track 命令实际上是修改了仓库中的.gitattributes文件，它会在<code>.gitattributes</code>文件中增加如下信息：</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#BABED8;">*.zip </span><span style="color:#F07178;">filter</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">lfs </span><span style="color:#F07178;">diff</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">lfs </span><span style="color:#F07178;">merge</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">lfs -text</span></span></code></pre></div><p>这告诉Git LFS来跟踪所有 <code>.zip</code>文件，你可以使用通配符或者指定特定的文件名。</p><p>所以在设置之后，为了让它生效，应该提交已经发生变更的<code>.gitattributes</code>文件</p><p>也可以通过直接编辑<code> .gitattributes</code>文件来设置要跟踪的大文件</p><p><strong>注意</strong></p><p>定义 Git LFS 应跟踪的文件类型，并不会将已经存在的文件转换为 Git LFS，例如其他分支或先前提交历史记录中的文件。为此，请使用<code> git lfs migrate</code>命令，该命令具有一系列旨在适应各种潜在用例的选项。</p><br><p>3、经过上面操作，就已经配置好了仓库的 git lfs，对指定的文件开启了大文件追踪，后续像正常情况一样提交代码即可，Git LFS 将自动处理大文件的上传和下载。</p><h2 id="常用操作" tabindex="-1">常用操作 <a class="header-anchor" href="#常用操作" aria-label="Permalink to &quot;常用操作&quot;">​</a></h2><h3 id="新增跟踪" tabindex="-1">新增跟踪 <a class="header-anchor" href="#新增跟踪" aria-label="Permalink to &quot;新增跟踪&quot;">​</a></h3><p>要使用Git LFS跟踪大文件，你需要使用<code>git lfs track</code>命令。例如：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">track</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.zip</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><br><h3 id="查看已跟踪的文件列表" tabindex="-1">查看已跟踪的文件列表 <a class="header-anchor" href="#查看已跟踪的文件列表" aria-label="Permalink to &quot;查看已跟踪的文件列表&quot;">​</a></h3><p>执行<code>git lfs track</code>（不带任何参数），可以查看当前已跟踪的Git LFS File 类型：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">track</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 展示当前已跟踪的Git LFS File 类型或文件</span></span>
<span class="line"><span style="color:#FFCB6B;">Listing</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">tracked</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patterns</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">*.bigfile</span><span style="color:#BABED8;"> (.gitattributes)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">*.exe</span><span style="color:#BABED8;"> (.gitattributes)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">*.zip</span><span style="color:#BABED8;"> (.gitattributes)</span></span>
<span class="line"><span style="color:#FFCB6B;">Listing</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">excluded</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">patterns</span></span></code></pre></div><br><h3 id="撤销跟踪" tabindex="-1">撤销跟踪 <a class="header-anchor" href="#撤销跟踪" aria-label="Permalink to &quot;撤销跟踪&quot;">​</a></h3><p>取消继续跟踪某类文件，并将其从cache中清理：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">untrack</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.zip</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--cached</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.zip</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>如果你想将这些文件添加回常规 Git 跟踪，可以执行以下操作：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">track</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.zip</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">重新添加.zip lfs配置</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><br><h3 id="锁定和解锁文件" tabindex="-1">锁定和解锁文件 <a class="header-anchor" href="#锁定和解锁文件" aria-label="Permalink to &quot;锁定和解锁文件&quot;">​</a></h3><p>通过git lfs lock命令，你可以锁定大文件，以防止其他人修改它们。解锁文件允许其他人继续修改文件。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lock</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">some_large_file.jpg</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">unlock</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">some_large_file.jpg</span></span></code></pre></div><br><h3 id="查看lfs信息" tabindex="-1">查看LFS信息 <a class="header-anchor" href="#查看lfs信息" aria-label="Permalink to &quot;查看LFS信息&quot;">​</a></h3><p>使用以下命令可以查看有关LFS的信息：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ls-files</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lfs</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">status</span></span></code></pre></div><p>这些命令提供了有关跟踪文件的详细信息，包括文件的大小和当前状态。</p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">Remote &quot;origin&quot; does not support the Git LFS locking API. Consider disabling it with:</span></span>
<span class="line"><span style="color:#babed8;">  $ git config lfs.https://github.com/yun8711/fe-engineering.git/info/lfs.locksverify false</span></span>
<span class="line"><span style="color:#babed8;">Post &quot;https://github.com/yun8711/fe-engineering.git/info/lfs/locks/verify&quot;: EOF</span></span>
<span class="line"><span style="color:#babed8;">error: failed to push some refs to &#39;https://github.com/yun8711/fe-engineering.git&#39;</span></span></code></pre></div><p>这个错误是因为你的 Git LFS 锁定 API 没有被远程仓库 &quot;origin&quot; 支持。Git LFS 锁定 API 是一个可选的特性，它允许你在修改大文件时锁定它们，以防止其他人同时修改。</p><p>当你尝试推送到一个不支持这个特性的远程仓库时，就会出现这个错误。在这种情况下，你可以考虑禁用 Git LFS 锁定 API。按照提示，通过运行以下命令来禁用它</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git config lfs.https://github.com/yun8711/fe-engineering.git/info/lfs.locksverify false</span></span></code></pre></div><p>然后再次提交即可</p>`,76),o=[e];function i(c,r,y,g,h,d){return a(),l("div",null,o)}const u=s(p,[["render",i]]);export{D as __pageData,u as default};
