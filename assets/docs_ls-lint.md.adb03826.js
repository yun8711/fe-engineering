import{_ as s,v as a,b as l,R as n}from"./chunks/framework.8277b2e6.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/ls-lint.md","filePath":"docs/ls-lint.md","lastUpdated":1709747010000}'),e={name:"docs/ls-lint.md"},o=n(`<h1>ls-lint</h1><p>v2.0.0（2023-05-23）</p><p><a href="https://ls-lint.org/" target="_blank" rel="noreferrer">官网</a> | <a href="https://github.com/loeffel-io/ls-lint" target="_blank" rel="noreferrer">github</a> | <a href="https://github.com/loeffel-io/ls-lint/blob/master/examples/nuxt_nuxt_js/.ls-lint.yml" target="_blank" rel="noreferrer">官方示例</a></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>一个非常快的文件和目录名称校验工具（linter），有以下特点：</p><ul><li>配置简单：只有一个 <code>.ls-lint.yml</code> 配置文件，规则简单</li><li>多平台支持：Windows, MacOS 和 Linux + NPM &amp; Docker环境</li><li>速度快，可以在毫秒内检查数千个文件和目录</li><li>支持所有扩展名，完整的 unicode 支持</li><li>第三方依赖只有 go-yaml 和 doublestar</li></ul><p><em>Vue3 项目配置示例</em></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">packages/*/{src,__tests__}</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.ts</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">camelCase | PascalCase</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.d.ts</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">camelCase</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.spec.ts</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">camelCase | PascalCase</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.mock.ts</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">camelCase</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">ignore</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">node_modules</span></span></code></pre></div><hr><p>查看了它的官方仓库，发现它使用了 <strong>Go 和 Starlark</strong> 编写</p><p>Go 语言是 ls-lint 的主要编程语言，利用它的高效率实现工具的核心功能，如解析文件、执行 linting 规则等。</p><p>Starlark 是 Google 开发的一种 Python 风格的语言，语法简单明了，易于学习和使用，旨在提供 Python 的大部分功能，同时保持可嵌入性和性能。主要用于配置文件和构建过程，被广泛用于 Bazel 和 Buck 等构建工具中。</p><p>Starlark 语言在 ls-lint 中的主要用途是定义 linting 规则。Starlark 的灵活性使 ls-lint 具有高的可定制性。</p><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@ls-lint/ls-lint</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre></div><br><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><p>在项目根目录下创建配置文件 <code>.ls-lint.yml</code>，有两个选项：</p><ul><li><code>ls</code>：用来定义项目目录的结构及其扩展、子扩展和目录的所有规则</li><li><code>ignore</code>：文件用来声明要被忽略检查的目录和文件</li></ul><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F78C6C;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">ignore</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F78C6C;">...</span></span></code></pre></div><br><h3 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h3><p>所有 <code>.js</code>,<code>.ts</code>和<code>.d.ts</code>项目文件必须以样式命名<code>kebab-case</code>，但忽略<code>.git</code>和<code>node_modules</code> 目录：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.ts</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.d.ts</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">ignore</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">.git</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">node_modules</span></span></code></pre></div><br><h3 id="校验目录名称" tabindex="-1">校验目录名称 <a class="header-anchor" href="#校验目录名称" aria-label="Permalink to &quot;校验目录名称&quot;">​</a></h3><p>通过<code>.dir</code> 表示对目录的规则</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">packages/src</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    		</span><span style="color:#676E95;font-style:italic;"># 当前目录及其子目录</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">.dir</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span></code></pre></div><br><h3 id="应用多个规则" tabindex="-1">应用多个规则 <a class="header-anchor" href="#应用多个规则" aria-label="Permalink to &quot;应用多个规则&quot;">​</a></h3><p>使用<code>|</code>操作符</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case | camelCase | PascalCase</span></span></code></pre></div><br><h3 id="使用-glob-语法" tabindex="-1">使用 glob 语法 <a class="header-anchor" href="#使用-glob-语法" aria-label="Permalink to &quot;使用 glob 语法&quot;">​</a></h3><p>支持 ls，不支持 ignore。glob 模式<code>*</code>or<code>**</code>可用于所有<strong>ls</strong>目录配置：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">packages/*/src</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># matches any sequence of non-path-separators</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">packages/**/templates</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># matches any sequence of characters, including path separators</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">.html</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">kebab-case</span></span></code></pre></div><br><h3 id="校验规则" tabindex="-1">校验规则 <a class="header-anchor" href="#校验规则" aria-label="Permalink to &quot;校验规则&quot;">​</a></h3><p>ls-lint 提供了多个开箱即用的规则：</p><ul><li>lowercase：每个字母必须小写，忽略非字母</li><li>camelcase / camelCase：小驼峰命名法，只允许字母和数字，如：<code>firstName</code>, <code>myFavoriteColor</code></li><li>pascalcase / PascalCase：大驼峰命名法，只允许字母和数字，如：<code>FirstName</code>, <code>MyFavoriteColor</code>.</li><li>snakecase / snake_case：单词间使用下划线分隔，只允许小写字母、数字、下划线，如：<code>first_name</code>, <code>my_favorite_color</code>.</li><li>screamingsnakecase / SCREAMING_SNAKE_CASE：与 <code>snake_case</code> 类似，但只允许小写字母、数字、下划线。例如：<code>FIRST_NAME</code>, <code>MY_FAVORITE_COLOR</code></li><li>kebabcase / kebab-case：单词之间使用短横线分隔，只允许小写字母、数字、短横线，例如：<code>first-name</code>, <code>my-favorite-color</code>.</li><li>pointcase / point.case：单词之间使用点号 <code> .</code>分隔，只允许小写字母、数字、点符号，例如：<code>first.name</code>, <code>my.favorite.color</code>.</li></ul><p>还可以使用 正则表达式：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">ls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">regex:[a-z0-9]+</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;"># the final regex pattern will be ^[a-z0-9]+$</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 多个正则</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">regex:Schema(\\.test)? | regex:Resolver(\\.test)?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">.js</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">regex:(Schema|Resolver)(\\.test)?</span></span></code></pre></div><h2 id="cli-选项" tabindex="-1">CLI 选项 <a class="header-anchor" href="#cli-选项" aria-label="Permalink to &quot;CLI 选项&quot;">​</a></h2><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>--config</td><td>ls-lint 配置文件路径</td></tr><tr><td>--workdir</td><td>指定工作目录，否则会从项目根目录开始扫描所有文件</td></tr><tr><td>--debug</td><td>在控制台输出调试信息</td></tr><tr><td>--warn</td><td>当发生错误时输出错误，退出进程，默认不输出错误</td></tr><tr><td>--version</td><td>打印版本信息</td></tr></tbody></table><p>一般都会结合 husky 一起使用，在 pre-commit 中添加执行（不好用）</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npx --no-install ls-lint &amp;&amp; ls-lint（或者一个scripts脚本）</span></span></code></pre></div>`,47),p=[o];function t(c,r,i,y,d,D){return a(),l("div",null,p)}const B=s(e,[["render",t]]);export{F as __pageData,B as default};
