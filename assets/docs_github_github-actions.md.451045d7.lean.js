import{_ as a,v as e,b as t,R as o}from"./chunks/framework.8277b2e6.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":false,"next":false},"headers":[],"relativePath":"docs/github/github-actions.md","filePath":"docs/github/github-actions.md","lastUpdated":1706944683000}'),r={name:"docs/github/github-actions.md"},i=o('<h1>Github Actions</h1><p><a href="https://docs.github.com/zh/actions" target="_blank" rel="noreferrer">官网文档</a></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>GitHub Actions 是 GitHub 提供的一项服务，是一种持续集成和持续交付 (CI/CD) 平台，用于自动化软件开发工作流程。它允许在代码存储库中设置自定义工作流程，以响应各种事件，如代码提交、拉取请求、问题的创建等。</p><p>GitHub Actions 的工作流程是使用 YAML 文件定义的，其中包括触发事件、作业和步骤等元素。这些工作流程可以用于持续集成、持续部署和其他自动化任务。</p><p>例如，在 vitepress 项目中自动将项目发布为 github page，在代码提交后自动运行测试脚本</p><h2 id="github-actions-的组件" tabindex="-1"><a href="https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions#github-actions-%E7%9A%84%E7%BB%84%E4%BB%B6" target="_blank" rel="noreferrer">GitHub Actions 的组件</a> <a class="header-anchor" href="#github-actions-的组件" aria-label="Permalink to &quot;[GitHub Actions 的组件](https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions#github-actions-的组件)&quot;">​</a></h2><p>工作流包含一个或多个可按顺序或并行运行的作业。 每个作业都将在其自己的虚拟机运行器中或在容器中运行，并具有一个或多个步骤，用于运行定义的脚本或运行动作。动作是一个可重用的扩展，可简化工作流 。</p><h3 id="工作流" tabindex="-1">工作流 <a class="header-anchor" href="#工作流" aria-label="Permalink to &quot;工作流&quot;">​</a></h3><p>工作流是一个可配置的自动化过程，它将运行一个或多个作业。由仓库中的<code>.github/workflows</code>目录中的 yaml 格式的文件定义，可以配置多个工作流程，每个流程可以执行不同的任务集。 例如，可以有一个工作流程来构建和测试拉取请求，另一个工作流程用于在每次创建发布时部署应用程序，还有一个工作流程在每次有人打开新议题时添加标签</p><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>事件是存储库中触发工作流程运行的特定活动，例如，当有人创建拉取请求、打开议题或将提交推送到存储库时，活动可能源自 GitHub，也可以通过发布到 REST API 或者手动方式触发工作流。</p><p>可以在<a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows" target="_blank" rel="noreferrer">官方文档</a>查看所有可以触发工作流的事件</p><h3 id="作业" tabindex="-1">作业 <a class="header-anchor" href="#作业" aria-label="Permalink to &quot;作业&quot;">​</a></h3><p>作业是工作流中在同一运行器上执行的一组步骤。 每个步骤是一个将要执行的 shell 脚本，或者一个将要运行的动作。</p><ul><li>步骤按顺序执行，并且相互依赖。 由于每个步骤都在同一运行器上执行，因此可以将数据从一个步骤共享到另一个步骤。</li><li>可以配置作业之间的依赖关系（默认没有依赖关系），且并行运行。当一个作业依赖另一个作业时，它将等待从属作业完成，然后才运行。</li></ul><h3 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-label="Permalink to &quot;操作&quot;">​</a></h3><p>操作是用于 GitHub Actions 平台的自定义应用程序，它执行复杂但经常重复的任务。 使用操作可帮助减少在工作流程文件中编写的重复代码量。 例如：可以从 GitHub 拉取 git 存储库，为构建环境设置正确的工具链，可以对云服务商的身份验证。</p><p>可以编写自己的操作，也可以在 GitHub Marketplace 中找到要在工作流程中使用的操作。</p><p><a href="https://docs.github.com/zh/actions/creating-actions" target="_blank" rel="noreferrer">官方文档 - 创建操作</a> | <a href="https://github.com/marketplace" target="_blank" rel="noreferrer">官方Marketplace</a></p><h2 id="工作流程语法" tabindex="-1">工作流程语法 <a class="header-anchor" href="#工作流程语法" aria-label="Permalink to &quot;工作流程语法&quot;">​</a></h2><p>工作流程是可配置的自动化过程，由一个或多个作业组成。 配置文件使用 YAML 语法，必须存放在仓库的<code>.github/workflows</code>目录中，</p><p>顶级配置项有以下几种：</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>工作流名称，会显示在 github 仓库的 actions 选项卡下，如果省略，则显示工作流文件相对根目录的文件路径</p><h3 id="run-name" tabindex="-1">run-name <a class="header-anchor" href="#run-name" aria-label="Permalink to &quot;run-name&quot;">​</a></h3><p>从工作流生成的工作流运行的名称</p><p>示例：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">run-name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}</span></span></code></pre></div><h3 id="on" tabindex="-1">on <a class="header-anchor" href="#on" aria-label="Permalink to &quot;on&quot;">​</a></h3><p>on 用来声明当 GitHub 上发生特定活动时、在预定的时间，或者在 GitHub 外部的事件发生时运行工作流程。</p><p>可以定义单个或多个可以触发工作流的事件、活动，或设置时间计划，还可以将工作流的执行限制为仅针对特定文件、标记或分支更改。</p><p>github 预设了很多触发工作流的事件，例如：</p><ul><li>push：在推送提交或 tag 时，可以使用 branches 声明仅推送到特定分支时运行</li><li>release：在仓库中发生发布活动时运行</li><li>label：在创建或修改仓库中的标签时运行</li><li>watch：在仓库加星时运行</li><li>fork：当有人 fork 仓库时运行</li></ul><h3 id="jobs" tabindex="-1">jobs <a class="header-anchor" href="#jobs" aria-label="Permalink to &quot;jobs&quot;">​</a></h3><p>工作流由一个或多个 <code>jobs</code> 组成，默认情况下并行运行。若要按顺序运行作业，可以使用 <code>jobs.&lt;job_id&gt;.needs</code> 关键字定义对其他作业的依赖关系。</p><h3 id="permissions" tabindex="-1">permissions <a class="header-anchor" href="#permissions" aria-label="Permalink to &quot;permissions&quot;">​</a></h3><p>在每个工作流开始时，github 会自动创建唯一的 <code>GITHUB_TOKEN</code> 令牌在工作流中进行身份验证。</p><p>可以使用 <code>permissions</code> 修改授予 <code>GITHUB_TOKEN</code> 的默认权限，根据需要添加或删除访问权限，以便只授予所需的最低访问权限。</p><p>可以使用 <code>permissions</code> 作为顶级密钥，以应用于工作流中的所有作业或特定作业。</p><h3 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h3><p>环境变量的 map</p><p>通过<code>jobs.&lt;job_id&gt;.env</code>设置仅用于单个作业的环境变量</p><p>通过<code>jobs.&lt;job_id&gt;.step[*].env</code>设置仅用于单个作业步骤的环境变量</p><h3 id="defaults" tabindex="-1">defaults <a class="header-anchor" href="#defaults" aria-label="Permalink to &quot;defaults&quot;">​</a></h3><p>创建将应用于工作流中所有作业的默认设置的map。</p><p>也可以在 <code>jobs.&lt;job_id&gt;.defaults</code> 设置只可用于作业的默认设置</p><h3 id="occurrency" tabindex="-1">occurrency <a class="header-anchor" href="#occurrency" aria-label="Permalink to &quot;occurrency&quot;">​</a></h3><p>使用 <code>concurrency</code> 以确保只有使用相同并发组的单一作业或工作流才会同时运行</p><h2 id="其他示例" tabindex="-1">其他示例 <a class="header-anchor" href="#其他示例" aria-label="Permalink to &quot;其他示例&quot;">​</a></h2><p><a href="https://github.com/mouday/domain-admin/tree/master/.github/workflows" target="_blank" rel="noreferrer">Domain Admin - 基于Python + Vue3的域名和SSL证书监测平台</a></p><p><a href="https://github.com/vuejs/router/tree/main/.github/workflows" target="_blank" rel="noreferrer">vue-route</a></p>',52),n=[i];function s(l,h,c,p,d,u){return e(),t("div",null,n)}const g=a(r,[["render",s]]);export{m as __pageData,g as default};
