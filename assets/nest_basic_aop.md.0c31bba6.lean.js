import{_ as s,v as a,b as n,R as p}from"./chunks/framework.8277b2e6.js";const l="/fe-engineering/assets/aop_1.9e92a4d0.webp",o="/fe-engineering/assets/aop_2.4865be7d.webp",e="/fe-engineering/assets/aop_3.ba9d00d8.webp",h=JSON.parse('{"title":"理解 AOP","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"nest/basic/aop.md","filePath":"nest/basic/aop.md","lastUpdated":1710305030000}'),t={name:"nest/basic/aop.md"},r=p('<h1 id="理解-aop" tabindex="-1">理解 AOP <a class="header-anchor" href="#理解-aop" aria-label="Permalink to &quot;理解 AOP&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>面向切面编程（Aspect-Oriented Programming，简称 AOP）是一种编程范式，其目标是提高模块化程度，特别是对于横切关注点（cross-cutting concerns）的处理。</p><p>在许多应用中，有一些功能是跨越多个模块的，例如日志记录、事务管理、安全性等。这些功能往往会散布在整个代码库中，导致代码重复和难以维护。AOP 的目标就是将这些横切关注点从它们所影响的业务逻辑中分离出来，以提高代码的模块化程度。</p><br><h2 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h2><p>后端框架基本都是 MVC（Model View Controller） 的架构。请求会先发送给 Controller，由它调度 Model 层的 Service 来完成业务逻辑，然后返回对应的 View。</p><p><img src="'+l+'" alt="nest_aop_01"></p><p>在上面这个流程中，想加入一些通用逻辑，比如：日志记录、权限控制、异常处理等，如果是在 Controller 层代码加入逻辑，一是不优雅，二是侵入了业务逻辑，所以可以在调用 Controller 之前和之后加入一个执行通用逻辑的阶段，例如：</p><p><img src="'+o+`" alt="nest_aop_02"></p><p>所以，<strong>AOP 的好处是可以把一些通用逻辑分离到切面中，保持业务逻辑的纯粹性，这样切面逻辑可以复用，还可以动态的增删</strong></p><blockquote><p>Koa 的洋葱模型也是一种 AOP 的实现，可以在不侵入业务的在外面包一层，加入一些逻辑，内层感知不到</p></blockquote><p>在 AOP 中，主要有以下几个概念：</p><ul><li>切面（Aspect）：一个关注点的模块化表示，通常包含一些通用的功能，如日志记录、事务管理等</li><li>连接点（Join point）：程序执行过程中的某个特定位置，如方法调用、异常抛出等</li><li>通知（Advice）：切面在特定连接点执行的代码。通知类型有“前置通知”、“后置通知”、“环绕通知”等</li><li>切入点（Pointcut）：一组连接点的集合，定义了通知应该在哪些连接点执行</li><li>引入（Introduction）：用于在类中添加一些新的方法或字段</li><li>织入（Weaving）：将切面应用到目标对象以创建新的代理对象的过程。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>在 NestJS 中，可以使用装饰器和拦截器来实现 AOP。例如，你可以创建一个日志拦截器，用于在每个方法调用前后记录日志：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Injectable</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">NestInterceptor</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ExecutionContext</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">CallHandler</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@nestjs/common</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Observable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rxjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">tap</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rxjs/operators</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Injectable</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">LoggingInterceptor</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">implements</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">NestInterceptor</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">intercept</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">context</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ExecutionContext</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">next</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">CallHandler</span><span style="color:#89DDFF;">):</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Observable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Before...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">next</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handle</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">tap</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">After... </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> now</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">ms</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后，你可以在你的控制器或者服务中使用 <code>@UseInterceptors()</code> 装饰器来应用这个拦截器：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Controller</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">UseInterceptors</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@nestjs/common</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">LoggingInterceptor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logging.interceptor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Controller</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">UseInterceptors</span><span style="color:#BABED8;">(LoggingInterceptor)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">AppController</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样，每次调用 AppController 的方法时，都会自动记录日志。</p><h2 id="nest-的-aop" tabindex="-1">Nest 的 AOP <a class="header-anchor" href="#nest-的-aop" aria-label="Permalink to &quot;Nest 的 AOP&quot;">​</a></h2><p>Nest 实现 AOP 的方式一共有五种，包括 Middleware、Guard、Pipe、Interceptor、ExceptionFilter</p><h3 id="middleware-中间件" tabindex="-1">Middleware 中间件 <a class="header-anchor" href="#middleware-中间件" aria-label="Permalink to &quot;Middleware 中间件&quot;">​</a></h3><p>Nest 的底层是 Express，所以实际上等价于 <a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noreferrer">express</a> 中间件</p><p>必须实现<code>NestMiddleware</code>接口，需要重写 use 方法，该方法有三个参数：request、response、next，最后必须执行 <code>next()</code>，否则会阻塞请求</p><p>支持全局级别、路由级别</p><h3 id="guard-守卫" tabindex="-1">Guard 守卫 <a class="header-anchor" href="#guard-守卫" aria-label="Permalink to &quot;Guard 守卫&quot;">​</a></h3><p>用于在调用某个 Controller 之前判断权限，返回 true 或者 false 来决定是否放行</p><blockquote><p>可以理解为 vue-router 的路由守卫 beforeEach</p></blockquote><p>Guard 要实现 CanActivate 接口，实现 canActivate 方法，可以从 context 拿到请求的信息，然后做一些权限验证等处理之后返回 true 或者 false。</p><p>Guard 可以抽离路由的访问控制逻辑，但是不能对请求、响应做修改</p><p>支持全局级别、路由级别</p><h3 id="interceptor-拦截器" tabindex="-1">Interceptor 拦截器 <a class="header-anchor" href="#interceptor-拦截器" aria-label="Permalink to &quot;Interceptor 拦截器&quot;">​</a></h3><p>可以在目标 Controller 方法前后加入一些逻辑</p><p>Interceptor 要实现 NestInterceptor 接口，实现 intercept 方法，调用 next.handle() 就会调用目标 Controller，可以在之前和之后加入一些处理逻辑。</p><p>支持全局级别、路由级别</p><h3 id="pipe-管道" tabindex="-1">Pipe 管道 <a class="header-anchor" href="#pipe-管道" aria-label="Permalink to &quot;Pipe 管道&quot;">​</a></h3><p>用来对参数做一些检验和转换</p><p>Pipe 要实现 PipeTransform 接口，实现 transform 方法，里面可以对传入的参数值 value 做参数验证，比如格式、类型是否正确，不正确就抛出异常。也可以做转换，返回转换后的值</p><p>支持对每个路由生效，或某个路由生产，或某个参数生效</p><h3 id="exceptionfilter-异常过滤器" tabindex="-1">ExceptionFilter 异常过滤器 <a class="header-anchor" href="#exceptionfilter-异常过滤器" aria-label="Permalink to &quot;ExceptionFilter 异常过滤器&quot;">​</a></h3><p>不管是 Pipe、Guard、Interceptor 还是最终调用的 Controller，过程中都可以抛出一些异常。ExceptionFilter 就可以对抛出的异常做处理，返回对应的响应</p><p>要实现 ExceptionFilter 接口，实现 catch 方法，就可以拦截异常了，但是要拦截什么异常还需要用 @Catch 装饰器来声明，拦截了异常之后，可以返回对应的响应，给用户更友好的提示。</p><p>支持全局级别、路由级别</p><h2 id="nest-中-aop-的顺序" tabindex="-1">Nest 中 AOP 的顺序 <a class="header-anchor" href="#nest-中-aop-的顺序" aria-label="Permalink to &quot;Nest 中 AOP 的顺序&quot;">​</a></h2><p>Middleware、Guard、Pipe、Interceptor、ExceptionFilter 都可以透明的添加某种处理逻辑到某个路由或者全部路由，而不对业务代码进行侵入，这就是 AOP 的好处。</p><p><img src="`+e+'" alt="nest_aop_03"></p><p>1、进入路由的时候，会先调用 Guard，判断是否有权限等，如果没有权限，就抛异常</p><p>2、抛出的 ForbiddenException 会被 ExceptionFilter 处理，返回 403 状态码</p><p>3、如果有权限，就会调用到拦截器，拦截器组织了一个链条，一个个的调用，去往 controller</p><p>4、调用 controller 方法之前，会使用 pipe 对参数做处理</p><p>5、最后调用 controller</p><p>ExceptionFilter 的调用时机，就是在响应之前对异常做一次处理</p>',53),c=[r];function F(i,y,D,B,d,A){return a(),n("div",null,c)}const u=s(t,[["render",F]]);export{h as __pageData,u as default};
