import{_ as s,v as a,b as n,R as p}from"./chunks/framework.8277b2e6.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/pnpm/function.md","filePath":"docs/pnpm/function.md","lastUpdated":1710309574000}'),o={name:"docs/pnpm/function.md"},l=p(`<h1>pnpm重要功能</h1><p>v8.14.0（2024-02）</p><h2 id="工作空间" tabindex="-1">工作空间 <a class="header-anchor" href="#工作空间" aria-label="Permalink to &quot;工作空间&quot;">​</a></h2><p>monorepo 也称为多包存储库、多项目存储库或单体存储库，是现在很多基础类库主流的代码仓库管理模式，可以将多个项目合并到一个仓库中，<strong>这样的作用是能在我们开发调试多包时，彼此间的依赖引用更加简单。</strong></p><p>pnpm 内置了对 monorepo 的支持，可以创建一个 workspace 以将多个项目合并到一个仓库中。</p><p>工作空间是一种管理多个包的方式，它可以让你在一个父目录下统一管理多个子包的依赖和版本号等信息。</p><br><h3 id="workspace-协议-workspace" tabindex="-1">Workspace 协议（workspace:） <a class="header-anchor" href="#workspace-协议-workspace" aria-label="Permalink to &quot;Workspace 协议（workspace:）&quot;">​</a></h3><p>pnpm 的 workspace 协议是一种特殊的依赖关系声明方式，用于在同一工作区的不同包之间建立依赖关系</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">packageA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述配置中，这将使 packageB 依赖于工作区中的 packageA。当你在 packageB 中运行 pnpm install 时，pnpm 将会链接到工作区中的 packageA，而不是从 npm 仓库中下载 packageA。</p><p>这种方式的好处是，当你在开发多个相互依赖的包时，你可以立即看到对其他包的更改，而无需发布和重新安装这些包。这对于大型项目和 monorepo 非常有用。</p><p>在<a href="./npmrc#工作空间设置"><code>.npmrc</code></a>中，通过一些配置，可以改变 pnpm 管理工作空间的一些行为</p><br><p><strong>通过别名引用 workspace 包</strong></p><p>假设你在 workspace 中有一个名为 <code>foo</code> 的包，默认情况下会像这样引用：<code>&quot;foo&quot;: &quot;workspace:*&quot;</code></p><p>也可以使用别名：<code>&quot;bar&quot;: &quot;workspace:foo@*&quot;</code></p><p>在发布之前，别名会被转换为常规名称，上面的示例将变为：<code>&quot;bar&quot;: &quot;npm:foo@1.0.0&quot;</code></p><br><p><strong>通过相对路径引用 workspace 包</strong></p><p>例如 workspace 中有 foo、bar两个包，<code>bar</code> 中依赖 <code>foo</code> 时可以写为： <code>&quot;foo&quot;: &quot;workspace:../foo&quot;</code>， 在发布之前，这些将转换为所有包管理器支持的常规版本规范。</p><br><p><strong>发布 workspace 包</strong></p><p>当 workspace 包被发布或者归档（无论它是通过 <code>pnpm pack</code> ，还是 <code>pnpm publish</code> 之类的发布命令）时，将动态替换这些 <code>workspace:</code> 依赖。</p><p>这个功能让开发者可以发布转化之后的包到远端，并且在本地开发时还可以正常使用 workspace 中的 packages，而不需要其它中间步骤。包的使用者也可以像常规的包那样正常使用。</p><p>比如，workspace 中有 <code>foo</code>、 <code>bar</code>、 <code>qar</code>、 <code>zoo</code> 并且它们的版本都是 <code>1.5.0</code>，如下：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:~</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">qar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:^</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">zoo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace:^1.5.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>将被转化为：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.5.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">~1.5.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">qar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.5.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">zoo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.5.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><br><h3 id="pnpm-workspace-yaml-配置" tabindex="-1">pnpm-workspace.yaml 配置 <a class="header-anchor" href="#pnpm-workspace-yaml-配置" aria-label="Permalink to &quot;pnpm-workspace.yaml 配置&quot;">​</a></h3><p>一个 workspace 的根目录下必须有 <a href="https://pnpm.io/zh/pnpm-workspace_yaml" target="_blank" rel="noreferrer"><code>pnpm-workspace.yaml</code></a> 文件，它是用来定义 pnpm 工作空间（workspace）的配置文件，书写格式遵循 <a href="/fe-engineering/general/text-format">YAML</a> 格式规范，配置项有：</p><p>1、packages：（最主要配置）数组，用来列出所有子包名称，格式可以为：</p><ul><li><code>packages/*</code>：表示所有位于 <code>packages </code>目录下的直接子目录都是一个子包</li><li><code>conponents/**</code>：表示匹配所有位于 <code>components</code> 目录下的子目录，包括嵌套</li><li><code>!**/test/**</code>：排除测试目录中的包</li></ul><p><em>以下回答来自 github copilot</em></p><p>2、link-workspace-packages：布尔值，默认 true。用于控制是否在工作区的包之间创建符号链接。如果设置为 true，则 pnpm install 会在工作区的包之间创建符号链接，以便它们可以相互访问。</p><p>3、shared-workspace-lockfile：布尔值，默认 true。用于控制是否使用一个共享的 pnpm-lock.yaml 文件来锁定工作区中所有包的依赖版本。如果设置为 true，则所有包将共享一个锁定文件，这可以确保在整个工作区中使用相同的依赖版本。</p><br><h3 id="实战案例" tabindex="-1">实战案例 <a class="header-anchor" href="#实战案例" aria-label="Permalink to &quot;实战案例&quot;">​</a></h3><p>在 my-project 这个 monorepo 项目中，有如下的目录结构，</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">pnpm-workspace.yaml</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">packages</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">eslint-config</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">└──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">components</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">├──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">│</span><span style="color:#BABED8;">    </span><span style="color:#C3E88D;">└──</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.ts</span></span></code></pre></div><p>在项目根目录下，packages 是子项目的目录，eslint-config、components 是两个子项目。</p><p>对于每个子项目，它们都有 package.json、index 等文件，本质上也是一个完整的项目</p><br><p><strong>项目配置</strong></p><p>在根目录下的 pnpm-workspace.yaml 文件中，需要声明工作空间中的子包：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">packages</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">packages/*</span></span></code></pre></div><p>一般也需要在 package.json 文件的 workspaces 字段中增加相应的配置</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><br><p><strong>子包配置</strong></p><p>修改子项目的 package.json 中的 name 配置，最好以<code>@&lt;scope&gt;/xxx</code>的形式命名，这样会方便子包管理，也可以是其他合法的 npm 包名。</p><p>在 components 这个子包，需要使用 eslint-config 这个子包时，进入 components 目录，运行 <code>pnpm add -D @ly/eslint</code>，就会在把 eslint-config 这个子项目安装到 components 这个项目中。</p><br><h3 id="常用操作" tabindex="-1">常用操作 <a class="header-anchor" href="#常用操作" aria-label="Permalink to &quot;常用操作&quot;">​</a></h3><p>在 pnpm 管理的 monorepo 项目中，有些操作与平常用法不太一样，需要注意。</p><br><p>1、根目录项目安装依赖</p><p>需要使用 <code>-w</code>或<code>--workspace-root</code>参数，表示仅在根目录项目执行命令。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-w</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pk</span><span style="color:#BABED8;">g</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>如果项目开启了 monorepo 模式，直接在根目录安装依赖，是会报错的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ERR_PNPM_ADDING_TO_ROOT  Running this command will add the dependency to the workspace root, which might not be what you want - if you really meant it, make it explicit by running this command again with the -w flag (or --workspace-root). If you don&#39;t want to see this warning anymore, you may set the ignore-workspace-root-check setting to true.</span></span></code></pre></div><p>大意是：如果想在根目录安装依赖，需要使用 <code>-w</code>或<code>--workspace-root</code>参数，如果不想看到这个警告，可以使用 <code>--ignore-workspace-root-check</code> 参数</p><br><p>2、安装 workspace 中的子包</p><p>默认情况下，.npmrc 中的 <code>link-workspace-packages</code> 值为 true，也就是工作空间中的包可以互相依赖，无需额外的参数就可以安装其他子包。另外，也可以使用 <code>--workspace</code>参数</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">pnpm add --workspace &lt;pkg&gt;</span></span></code></pre></div><br><p>3、给子项目安装依赖</p><p>当控制台位于项目根目录时，要为某个子项目安装依赖，可以使用 <code>-F</code>或<code>--filter</code>参数来指定要操作的子项目</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">pnpm add lodash-es -F pa</span></span></code></pre></div><p>上面的命令，会把 lodash-es 这个包安装到项目的 pa 子项目中</p><p>这里使用了 pnpm 过滤参数，它有很丰富的用法，详情查看<a href="https://pnpm.io/zh/filtering" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="环境管理" tabindex="-1">环境管理 <a class="header-anchor" href="#环境管理" aria-label="Permalink to &quot;环境管理&quot;">​</a></h2><p>pnpm 自带的环境管理功能，可以管理本机的 nodejs 版本，并且配合 <code>use-node-version</code> 配置，可以自动下载并切换当前项目所需要的 nodejs 版本，算是非常不错的功能，让我告别了 nvm</p><p><strong>注意：</strong></p><p>如果要使用 pnpm 来管理 nodejs 版本，则需要全局安装 pnpm，也就是不通过 <code>npm -g pnpm</code> 命令安装，这种安装方式 下 pnpm 还是 npm 的一个包，无法实现管理 nodejs 版本。</p><p>非全局安装情况下，曾经遇到的一个问题是：当使用 pnpm 切换到低版本的 nodejs v10 时，由于此版本的 nodejs 与 pnpm 不兼容，导致 pnpm 命令无法正常执行，也就无法再切换到其他版本的 nodejs。</p><p>通过 <code>pnpm env</code> 命令来实现 nodejs 版本管理</p><br><h3 id="安装并激活" tabindex="-1">安装并激活 <a class="header-anchor" href="#安装并激活" aria-label="Permalink to &quot;安装并激活&quot;">​</a></h3><p>安装并立即切换为某个版本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 安装 LTS 版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装指定版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">16</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装最新版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">latest</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 安装预发布版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">nightly</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">rc</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">16.0</span><span style="color:#C3E88D;">.0-rc.0</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">rc/14</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用版本名称安装</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">use</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">argon</span></span></code></pre></div><blockquote><p>其他版本的代号：Jod（22.x 2024）、Iron（20.x 2023）、Hydrogen（18.x 2022）、Gallium（16.x 2021）、Fermium（14.x 2020）、Dubnium（10.x 2018）、Carbon（8.x 2017）、Boron（6.x 2016）、Argon（4.x 2015）</p></blockquote><br><h3 id="添加-v8-9-0" tabindex="-1">添加（v8.9.0） <a class="header-anchor" href="#添加-v8-9-0" aria-label="Permalink to &quot;添加（v8.9.0）&quot;">​</a></h3><p>只是安装，并不激活为当前版本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">lts</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">18</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">20.0</span><span style="color:#C3E88D;">.1</span></span></code></pre></div><br><h3 id="移除" tabindex="-1">移除 <a class="header-anchor" href="#移除" aria-label="Permalink to &quot;移除&quot;">​</a></h3><p>移除指定版本的 Node.JS</p><p><em>示例</em></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">14.0</span><span style="color:#C3E88D;">.0</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">14.0</span><span style="color:#C3E88D;">.0</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">16.2</span><span style="color:#C3E88D;">.3</span></span></code></pre></div><br><h3 id="列出可用版本" tabindex="-1">列出可用版本 <a class="header-anchor" href="#列出可用版本" aria-label="Permalink to &quot;列出可用版本&quot;">​</a></h3><p>列出本地或远程可用的 Node.js 版本。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 本地安装的版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">list</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 列出远程可用的版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">list</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--remote</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 列出远程可用的指定版本</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">env</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">list</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--remote</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">16</span></span></code></pre></div><h2 id="分支锁文件" tabindex="-1">分支锁文件 <a class="header-anchor" href="#分支锁文件" aria-label="Permalink to &quot;分支锁文件&quot;">​</a></h2><p>简单的说，就是保持每个分支有一个单独的锁文件，并且可以在适当时候再合并。</p><blockquote><p>这个功能在多分支开发场景时非常有用，比如客户 A 对应分支 a，客户 B 对应分支 b，因为历史原因或者环境问题，每个分支使用了不同的依赖，开发过程切换分支时，必须手动执行一次 install 命令，才能保证当前环境下依赖正常。</p></blockquote><br><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><p>在 <code>.npmrc</code> 文件中，通过以下配置开启此功能</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git-branch-lockfile=true</span></span></code></pre></div><p>然后，lockfile 的文件名将会变为：<code>pnpm-lock.&lt;分支名&gt;.yaml</code>，当切换分支，并且每个分支上的依赖各自不同时，它会根据当前所使用的分支自行处理依赖：</p><ul><li>在当前分支，如果 pnpm-lock.yaml 文件有修改，它会自动提交这些修改</li><li>切换到新的分支后，如果新分支的 pnpm-lock.yaml 文件与当前的不一致，会自动执行 pnpm install 来更新依赖项</li></ul><br><h3 id="合并锁文件" tabindex="-1">合并锁文件 <a class="header-anchor" href="#合并锁文件" aria-label="Permalink to &quot;合并锁文件&quot;">​</a></h3><p>要合并所有分支上的锁文件，运行下面的命令即可：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--merge-git-branch-lockfiles</span></span></code></pre></div><p>运行后，所有的分支锁文件会合并成一个 <code>pnpm-lock.yaml</code></p><p>也可以通过 <code>.npmrc</code>文件中的 <code>merge-git-branch-lockfiles-branch-pattern</code>配置来让 pnpm 自动完成该操作：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C3E88D;">merge-git-branch-lockfiles-branch-pattern[]=main</span></span>
<span class="line"><span style="color:#C3E88D;">merge-git-branch-lockfiles-branch-pattern[]=release*</span></span></code></pre></div><p>当 在 <code>main</code> 分支中或者分支名称以 <code>release</code>开头时， <code>pnpm install</code> 将合并所有分支锁文件</p>`,114),e=[l];function c(t,r,y,D,i,B){return a(),n("div",null,e)}const E=s(o,[["render",c]]);export{F as __pageData,E as default};
