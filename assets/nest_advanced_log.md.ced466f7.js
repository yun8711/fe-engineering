import{_ as e,v as a,b as t,R as o}from"./chunks/framework.8277b2e6.js";const w=JSON.parse('{"title":"日志系统","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"nest/advanced/log.md","filePath":"nest/advanced/log.md","lastUpdated":1708623445000}'),n={name:"nest/advanced/log.md"},i=o('<h1 id="日志系统" tabindex="-1">日志系统 <a class="header-anchor" href="#日志系统" aria-label="Permalink to &quot;日志系统&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><h3 id="nest-内置日志模块" tabindex="-1">Nest 内置日志模块 <a class="header-anchor" href="#nest-内置日志模块" aria-label="Permalink to &quot;Nest 内置日志模块&quot;">​</a></h3><p><code>Nest</code> 附带一个默认的内部日志记录器，由 <code>@nestjs/common</code> 包中的 <code>Logger</code> 类实现，可以全面控制如下的日志系统的行为：</p><ul><li>启用或禁用日志，默认启用</li><li>指定日志系统展示级别，如错误、警告、调试信息等</li><li>覆盖默认日志记录器的时间戳（例如使用 ISO8601 标准作为日期格式）</li><li>完全覆盖默认日志记录器</li><li>通过扩展自定义默认日志记录器</li><li>使用依赖注入来简化编写和测试你的应用</li></ul><h3 id="服务端日志" tabindex="-1">服务端日志 <a class="header-anchor" href="#服务端日志" aria-label="Permalink to &quot;服务端日志&quot;">​</a></h3><p>服务端打印日志一般不会用 console.log，原因是：</p><ul><li>服务端的日志经常要用来排查问题，需要搜索、分析日志内容，需要写入文件或者数据库里进行持久化</li><li>日志需要分级别，比如错误的日志、普通日志，需要能够过滤不同级别</li><li>打印日志需要带上时间戳、代码位置等信息</li></ul><p>基于上述需求，一般都会使用专门的日志框架，比如 winston</p><h2 id="winston" tabindex="-1">winston <a class="header-anchor" href="#winston" aria-label="Permalink to &quot;winston&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/winston" target="_blank" rel="noreferrer">https://www.npmjs.com/package/winston</a></p><p>它是 nodejs 最流行的日志框架</p><p><code>winston</code> 被设计为一个简单且通用的日志记录库，支持多种传输。传输本质上是日志的存储设备。每个 <code>winston</code> 记录器可以在不同级别配置多个传输（请参阅：传输）（请参阅：日志记录级别）。例如，人们可能希望将错误日志存储在持久的远程位置（如数据库），但所有日志都输出到控制台或本地文件。</p><p><code>winston</code> 旨在将日志记录过程的各个部分解耦，使其更加灵活和可扩展。</p><h2 id="winston-日志中间件" tabindex="-1">Winston 日志中间件 <a class="header-anchor" href="#winston-日志中间件" aria-label="Permalink to &quot;Winston 日志中间件&quot;">​</a></h2>',15),s=[i];function l(r,d,c,h,p,u){return a(),t("div",null,s)}const f=e(n,[["render",l]]);export{w as __pageData,f as default};
