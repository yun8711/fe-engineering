import{_ as s,v as n,b as a,R as p}from"./chunks/framework.8277b2e6.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/eslint/typescript-eslint.md","filePath":"docs/eslint/typescript-eslint.md","lastUpdated":1710299060000}'),o={name:"docs/eslint/typescript-eslint.md"},l=p(`<h1>插件：typescript-eslint</h1><p>v6.20.0</p><p><a href="https://typescript-eslint.io/" target="_blank" rel="noreferrer">官网</a> | <a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noreferrer">github</a></p><p>ESLint 默认只能识别 js 代码，而不能识别 ts 代码，它们所使用的解析器不同，并且 js 解析器无法读取特定于 ts 的语法和类型信息</p><p>而 typescript-eslint 就是让 ts 代码在ESLint 中运行的插件，它提供了以下功能：</p><ul><li>允许 ESLint 解析 TypeScript 语法</li><li>为 ESLint 规则创建一组工具，以便能够使用 TypeScript 的类型信息</li><li>提供了一大批特定于 TypeScript 的 lint规则，或者使用了类型信息的 lint 规则</li></ul><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>1、安装：</p><p><code>pnpm add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</code></p><p>另外还必须安装 eslint 和 typescript</p><p>2、配置</p><p>（1）在 <code>.eslintrc.js</code> 文件中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* eslint-env node */</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:@typescript-eslint/recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">root</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>上述的配置详解：</p><p><code>parser: &#39;@typescript-eslint/parser&#39;</code>：必需，表示使用<code>@typescript-eslint/parser</code> 包来解析源文件，<code>@typescript-eslint/parser</code>是 ts 的解析器，用来解析 ts 源码并转换为 estree，以便 eslint 可以进行检查</p><p><code>plugins: [&#39;@typescript-eslint&#39;]</code>：表示将 <code>@typescript-eslint/eslint-plugin</code> 包加载为 eslint 的插件，然后在代码中就可以使用 typescript-eslint 的规则。</p><p><code>extends:[...]</code>：表示扩展配置，<code>eslint:recommended</code>是 eslint 的内置推荐规则，<code>plugin:@typescript-eslint/recommended</code>是 typescript-eslint 提供的一套推荐配置。</p><p>（2）在 <code>eslint.config.js</code> 文件中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> parserTypeScript </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> pluginTypeScript </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@typescript-eslint/eslint-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">files</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.?([cm])ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.?([cm])tsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">languageOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> parserTypeScript</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">sourceType</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">@typescript-eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> pluginTypeScript</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">[</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">pluginTypeScript</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">configs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">strict</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">rules</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@typescript-eslint/ban-types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">off</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      ]</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">]</span></span></code></pre></div><h2 id="推荐配置" tabindex="-1">推荐配置 <a class="header-anchor" href="#推荐配置" aria-label="Permalink to &quot;推荐配置&quot;">​</a></h2><p>插件内置了以下配置：</p><ul><li><code>all</code>：启用 typescript-eslint 的所有规则。一般不建议使用该配置</li><li><code>base</code>：一个最小的规则集，仅设置运行 typescript-eslint 所需的解析器和插件选项。一般不建议直接使用它。使用其他 recommended 的配置时，会自动包含它</li><li><code>disable-type-checked</code>：禁用项目中所有类型感知规则 linting ，一般用于文件子集进行有条件的覆盖规则</li><li><code>eslint-recommended</code>：用来扩展<code>eslint:recommended</code>规则，禁用了已经可以被 ts 编辑器检查的 eslint 规则</li><li><code>recommended</code>：推荐的代码正确性规则，无需额外配置</li><li><code>recommended-type-checked</code> ：包含 <code>recommended</code> + 需要类型信息的其他推荐规则</li><li><code>strict</code> ：包含 <code>recommended</code> + 额外的严格规则，这些规则也可以捕获错误，但比推荐的规则更具有主观性。</li><li><code>strict-type-checked</code> ：包含 <code>strict</code> + 需要类型信息的其他严格规则</li><li><code>stylistic</code> ：无需额外配置即可使用的样式规则</li><li><code>stylistic-type-checked</code> ：包含 <code>stylistic</code> + 需要类型信息的其他样式规则</li></ul><p>说明：</p><ul><li>除 <code>all</code> 、 <code>strict</code> 和 <code>strict-type-checked</code> 之外，其他配置都是稳定的，只在主版本升级中进行规则的变</li><li>以 checked 结尾的配置，都是用于开启类型检查的情况</li><li><code>stylistic</code> 配置的规则主要关注代码的格式和风格</li><li>typescript-eslint 提供的预设配置均不支持格式化的规则，关于格式化，应该使用 prettier</li></ul><h2 id="使用类型进行-linting" tabindex="-1">使用类型进行 Linting <a class="header-anchor" href="#使用类型进行-linting" aria-label="Permalink to &quot;使用类型进行 Linting&quot;">​</a></h2><p>一些 typescript-eslint 规则需要利用 ts 强大的类型系统 API 来进行检查，配置如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* eslint-env node */</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:@typescript-eslint/recommended-type-checked</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">project</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">tsconfigRootDir</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> __dirname</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">root</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><code>plugin:@typescript-eslint/recommended-type-checked</code>：typescript-eslint 提供的一种推荐配置。此规则包含建议的规则，这些规则还需要类型信息。</p><p><code>parserOptions.project</code>：告诉解析器 tsconfig.json 文件的位置，</p><ul><li>可以设置为 true ，表示在源文件最接近的位置寻找</li><li>也可以设置为 glob 路径字符串或字符串数组，用来指定特定的 tsconfig.json 配置文件</li></ul><p><code>parserOptions.tsconfigRootDir</code>：指定项目根目录的绝对路径</p><p><strong>禁用文件子集的类型 linting</strong></p><p>可以将 ESLint 的覆盖配置与我们的 <code>disable-type-checked</code> 配置结合使用，以关闭特定文件子集上的类型感知 linting。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:@typescript-eslint/recommended</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:@typescript-eslint/recommended-type-checked</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">project</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">tsconfigRootDir</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> __dirname</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">root</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">overrides</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">files</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:@typescript-eslint/disable-type-checked</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p><strong>性能问题</strong></p><p>类型化规则会带来一定的性能问题，因为 ts 会在 eslint 进行检查前对项目进行构建。对于小型项目，这种性能问题可以忽略不计，对于大型项目，可能需要更长的时间。</p><p>但是，大多数用户不介意这种开发成本，因为类型感知和静态分析规则带来的收益是值得的。此外，大多数用户主要通过 IDE 插件来 lint 错误，这些插件通过缓存功能可以避免过多的性能损耗。</p><h2 id="在-monorepo-中使用" tabindex="-1">在 monorepo 中使用 <a class="header-anchor" href="#在-monorepo-中使用" aria-label="Permalink to &quot;在 monorepo 中使用&quot;">​</a></h2><p>方式一：在根目录创建配置文件</p><p>可以只在根目录创建一份配置文件，它的 include 字段包含所有需要被检查的文件的路径。</p><p>如果 include 字段不能包含所有要 linted 的文件，建议创建一个名为<code>tsconfig.eslint.json</code> 的新配置，然后修改<code>.eslintrc.js</code>指定此配置文件。</p><br><p>方式二：每个子包一个配置文件，根目录可选</p><p><code>parserOptions.project</code> 选项接受相对路径数组，所以可以把根目录下的配置文件放在第一个位置，用作后备。</p><h2 id="解析器配置" tabindex="-1">解析器配置 <a class="header-anchor" href="#解析器配置" aria-label="Permalink to &quot;解析器配置&quot;">​</a></h2><p>在使用 ts 时，会指定使用 <code>@typescript-eslint/parser</code> 解析器，这个解析器专门用来解析 ts 代码。</p><p>由于TypeScript 生成的 AST 格式与 ESLint 能识别的 AST 格式不同，TS 的 AST 针对解析不完整代码和类型检查的用例进行了优化，ESTree 未经优化，适用于遍历 AST 的“通用”用例。</p><p>如果选择了该解析器，则 <code>parserOptions</code> 的可配置内容如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ParserOptions</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">allowAutomaticSingleRunInference</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">cacheLifetime</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">glob</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Infinity</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">ecmaFeatures</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">jsx</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">globalReturn</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">latest</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">emitDecoratorMetadata</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">extraFileExtensions</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">jsDocParsingMode</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">type-info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">jsxFragmentName</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">jsxPragma</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">lib</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">programs</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">import</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">typescript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">).</span><span style="color:#FFCB6B;">Program</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">project</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">projectFolderIgnoreList</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">tsconfigRootDir</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">warnOnUnsupportedTypeScriptVersion</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">EXPERIMENTAL_useProjectService</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="allowautomaticsingleruninference" tabindex="-1"><code>allowAutomaticSingleRunInference</code> <a class="header-anchor" href="#allowautomaticsingleruninference" aria-label="Permalink to &quot;\`allowAutomaticSingleRunInference\`&quot;">​</a></h3><p>默认：false，只在 @typescript-eslint/parser 的 5.x 版本及以上可用</p><p>当设置为 true 时，解析器会自动检查你的项目配置，并根据这些配置来决定如何解析你的代码，例如，它可能会检查项目是否使用了某些特定的语法特性，或者你是否启用了某些特定的编译选项，然后根据这些信息来调整它的解析策略。</p><p>当 typescript-eslint 在后台管理 TypeScript 程序使用类型信息进行 linting 时，这种区别对于性能很重要。管理长时间运行的用例所需的TypeScript“监视”程序有很大的开销。能够推断出单次运行情况可以让 typescript-eslint 更快地执行不可变程序。</p><blockquote><p>在未来的主要版本中，会默认启用该属性</p></blockquote><br><h3 id="cachelifetime" tabindex="-1"><code>cacheLifetime</code> <a class="header-anchor" href="#cachelifetime" aria-label="Permalink to &quot;\`cacheLifetime\`&quot;">​</a></h3><p>用于精细地控制内部缓存时间，默认情况下，缓存时间为 30 秒，可以指定为整数，如果不希望缓存过期，则可以指定为“Infinity”。</p><br><h3 id="ecmafeatures" tabindex="-1"><code>ecmaFeatures</code> <a class="header-anchor" href="#ecmafeatures" aria-label="Permalink to &quot;\`ecmaFeatures\`&quot;">​</a></h3><p>可选，用于指定你的代码使用了哪些 ECMAScript 的特性，决定了 ts 如何分析源码中的语法，它有以下属性：</p><ul><li>jsx：默认 false，是否启用 jsx 解析，不会影响已知的文件类型，.js<code>, </code>.mjs<code>, </code>.cjs<code>, </code>.jsx<code>, </code>.ts<code>, </code>.mts<code>, </code>.cts<code>, </code>.tsx<code>, </code>.json</li><li>globalReturn：默认 false，是否允许全局 return 语句</li></ul><blockquote><p>&quot;全局 return 语句&quot;通常指的是在全局作用域中使用的return语句。在JavaScript和TypeScript中，return语句通常用于函数内部，用于返回函数的结果。如果你在全局作用域（即不在任何函数内部）使用return语句，你将会收到一个错误，因为return语句只能在函数体内使用。</p></blockquote><br><h3 id="ecmaversion" tabindex="-1"><code>ecmaVersion</code> <a class="header-anchor" href="#ecmaversion" aria-label="Permalink to &quot;\`ecmaVersion\`&quot;">​</a></h3><p>默认：2018，指定要使用的 ECMAScript 语法版本，解析器会根据它来确定如何分析代码。</p><p>如果是版本或年份，必须为数字，也可以指定为<code>latest</code>，表示使用最新版本</p><br><h3 id="emitdecoratormetadata" tabindex="-1"><code>emitDecoratorMetadata</code> <a class="header-anchor" href="#emitdecoratormetadata" aria-label="Permalink to &quot;\`emitDecoratorMetadata\`&quot;">​</a></h3><p>默认：undefined</p><p>此选项告诉解析器像 中 <code>tsconfig.json</code> 设置 <code>emitDecoratorMetadata: true</code> 一样运行，但不进行类型识别 linting。换句话说，在这种情况下，不必指定 <code>parserOptions.project</code> ，从而加快了 linting 过程。</p><br><h3 id="extrafileextensions" tabindex="-1"><code>extraFileExtensions</code> <a class="header-anchor" href="#extrafileextensions" aria-label="Permalink to &quot;\`extraFileExtensions\`&quot;">​</a></h3><p>默认：undefined</p><p>此选项允许提供一个或多个其他文件扩展名，这些文件扩展名应在 TypeScript 程序编译中考虑。默认扩展名为 <code>[&#39;.js&#39;, &#39;.mjs&#39;, &#39;.cjs&#39;, &#39;.jsx&#39;, &#39;.ts&#39;, &#39;.mts&#39;, &#39;.cts&#39;, &#39;.tsx&#39;]</code> 。添加以 <code>.</code> 开头的扩展名，后跟文件扩展名。例如，对于 <code>.vue</code> 文件使用 <code>&quot;extraFileExtensions&quot;: [&quot;.vue&quot;]</code> 。</p><br><h3 id="jsdocparsingmode" tabindex="-1"><code>jsDocParsingMode</code> <a class="header-anchor" href="#jsdocparsingmode" aria-label="Permalink to &quot;\`jsDocParsingMode\`&quot;">​</a></h3><p>默认值： 如果 <code>parserOptions.project</code> 已设置，则为 <code>&#39;all&#39;</code> ，否则为 <code>&#39;none&#39;</code>，如果设置了 <code>project</code> ，则无需设置此项，解析器会从编译器中检测到</p><p>可选值有：</p><ul><li><code>&#39;all&#39;</code> ：始终解析所有 JSDoc 注释</li><li><code>&#39;none&#39;</code> ：永远不解析任何 JSDoc 注释</li><li><code>&#39;type-info&#39;</code> ：仅解析提供正确类型信息所需的 JSDoc 注释。TS 将始终解析非 TS 文件中的 JSDoc，但不会解析 TS 文件中的 JSDoc</li></ul><p>当 TS 解析文件时，它还会将 JSDoc 注释解析到 AST 中，然后 lint 规则可以使用这些注释。如果 TypeScript &gt;=5.3，则此选项可以用作性能优化。</p><br><h3 id="jsxfragmentname" tabindex="-1"><code>jsxFragmentName</code> <a class="header-anchor" href="#jsxfragmentname" aria-label="Permalink to &quot;\`jsxFragmentName\`&quot;">​</a></h3><p>默认：null，用于指定在 TypeScript 文件中使用的 JSX 片段的名称</p><p>在 JSX 中，片段是一种特殊的语法，用于返回多个元素。在 React 中，通常使用 &lt;&gt;...&lt;/&gt; 作为片段的语法。然而，有些库可能使用不同的片段组件，例如 Preact 使用 Fragment。</p><p>如果在 TypeScript 项目中使用了这样的库，你可以通过 jsxFragmentName 选项来指定你的片段组件的名称。例如，使用 Preact 时，可以指定为<code>Fragment</code></p><br><h3 id="jsxpragma" tabindex="-1"><code>jsxPragma</code> <a class="header-anchor" href="#jsxpragma" aria-label="Permalink to &quot;\`jsxPragma\`&quot;">​</a></h3><p>默认：<code>&#39;React&#39;</code>，用于指定在 TypeScript 文件中使用的 JSX 工厂函数的名称</p><p>如果提供 <code>parserOptions.project</code> ，则无需设置此项，解析器会从编译器中检测到</p><p>在 JSX 中，工厂函数是用于创建元素的函数。在 React 中，通常使用 <code>React.createElement</code> 作为工厂函数。然而，有些库可能使用不同的工厂函数，例如 Preact 使用 h。</p><p>如果在 TypeScript 项目中使用了这样的库，你可以通过 jsxPragma 选项来指定你的工厂函数的名称。例如，如果你使用 Preact，可以指定为<code>h</code></p><br><h3 id="lib" tabindex="-1"><code>lib</code> <a class="header-anchor" href="#lib" aria-label="Permalink to &quot;\`lib\`&quot;">​</a></h3><p>默认：<code>[&#39;es2018&#39;]</code>，与 tsconfig.json 的编译器选项相同，用于指定 TypeScript 编译器应该包含哪些库文件</p><br><h3 id="programs" tabindex="-1"><code>programs</code> <a class="header-anchor" href="#programs" aria-label="Permalink to &quot;\`programs\`&quot;">​</a></h3><p>默认：undefined，</p><br><h3 id="project" tabindex="-1"><code>project</code> <a class="header-anchor" href="#project" aria-label="Permalink to &quot;\`project\`&quot;">​</a></h3><p>默认：undefined，用于指定 TypeScript 项目的配置文件，即 tsconfig.json 文件的路径</p><p>它可以设置为：</p><ul><li><code>true</code>：会从每个源文件最近的位置查找 tsconfig.json 文件</li><li>具体的文件路径，如<code>./tsonfig.json</code>，表示一个相对于项目根目录的相对路径</li><li>glob pattern，如<code>&#39;./packages/**/tsconfig.json&#39;</code>，</li><li>一个由具体文件路径和glob pattern 组成的数组</li></ul><br><h3 id="projectfolderignorelist" tabindex="-1"><code>projectFolderIgnoreList</code> <a class="header-anchor" href="#projectfolderignorelist" aria-label="Permalink to &quot;\`projectFolderIgnoreList\`&quot;">​</a></h3><p>默认： <code>[&quot;**/node_modules/**&quot;]</code> ，表示要忽略的文件</p><br><h3 id="tsconfigrootdir" tabindex="-1"><code>tsconfigRootDir</code> <a class="header-anchor" href="#tsconfigrootdir" aria-label="Permalink to &quot;\`tsconfigRootDir\`&quot;">​</a></h3><p>默认： <code>undefined</code> ，为 project 选项指定根目录</p><br><h3 id="warnonunsupportedtypescriptversion" tabindex="-1"><code>warnOnUnsupportedTypeScriptVersion</code> <a class="header-anchor" href="#warnonunsupportedtypescriptversion" aria-label="Permalink to &quot;\`warnOnUnsupportedTypeScriptVersion\`&quot;">​</a></h3><p>默认： <code>true</code> ，当使用解析器未明确支持的 ts 版本时，会发出警告</p><br><h3 id="experimental-useprojectservice" tabindex="-1"><code>EXPERIMENTAL_useProjectService</code> <a class="header-anchor" href="#experimental-useprojectservice" aria-label="Permalink to &quot;\`EXPERIMENTAL_useProjectService\`&quot;">​</a></h3><p>默认： <code>false</code> ，<code>project</code>配置项的实验性替代方案</p>`,114),e=[l];function t(c,r,i,D,y,F){return n(),a("div",null,e)}const E=s(o,[["render",t]]);export{B as __pageData,E as default};
