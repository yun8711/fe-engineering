import{_ as t,v as e,b as a,R as s}from"./chunks/framework.8277b2e6.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/git/gitattributes.md","filePath":"docs/git/gitattributes.md","lastUpdated":1708623445000}'),i={name:"docs/git/gitattributes.md"},l=s(`<h1>.gitattributes</h1><p>npm v9.8.0 node v20</p><p><a href="https://git-scm.com/docs/gitattributes" target="_blank" rel="noreferrer">官方文档</a></p><p>参阅：<a href="https://github.com/element-plus/element-plus/blob/dev/.gitattributes" target="_blank" rel="noreferrer">element-plus</a> | <a href="https://github.com/vitejs/vite/blob/main/.gitattributes" target="_blank" rel="noreferrer">vite</a></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><code>.gitattributes</code> 是 Git 版本控制系统中的一个配置文件，用于管理在版本控制下的文本文件的属性和行为。通常存储在 Git 仓库的根目录或者特定子目录中。它可以定义以下内容：</p><ul><li>文本文件的属性：比如换行符类型、编码等。</li><li>Git 忽略规则：比如忽略某些文件或文件夹、对文件名进行匹配等。</li><li>Git diff 和 merge 行为：比如合并冲突时选用哪个版本的文件等。</li></ul><p>语法类似于 <code>.gitignore</code> 文件，由一系列模式组成，每个模式占据一行，用于描述要应用的属性或规则。例如：</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">*.txt    text</span></span>
<span class="line"><span style="color:#BABED8;">*.png    binary</span></span>
<span class="line"><span style="color:#BABED8;">*.md     text </span><span style="color:#F07178;">eol</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">lf</span></span></code></pre></div><p>上面的例子表示：</p><ul><li>所有的 <code>.txt</code> 文件都被视为文本文件（默认值是二进制）；</li><li>所有的 <code>.png</code> 文件都被视为二进制文件（不需要任何转换）；</li><li>所有的 <code>.md</code> 文件都被视为文本文件，并采用 LF 换行符（而不是默认的 CRLF）。</li></ul><p><code>.gitattributes</code> 文件的使用可以提高 Git 仓库中文本文件的可移植性和可维护性，因为它可以确保在不同操作系统和环境中，文件属性的一致性和预期行为。</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="语法规则" tabindex="-1">语法规则 <a class="header-anchor" href="#语法规则" aria-label="Permalink to &quot;语法规则&quot;">​</a></h3><p>主要由以下几部分组成：</p><ul><li>路径模式：这是 .gitattributes 文件中的每一行的开始部分，用于匹配仓库中的文件或目录。例如：<code>*.js</code> 匹配所有的 JavaScript 文件，<code>/docs</code> 匹配根目录下的 <code>docs</code> 目录</li><li>属性：路径模式后面跟着一个或多个属性，属性之间用空格分隔。每个属性都由一个名称和一个可选的等号后的值组成。例如：<code>text</code> 是一个属性名称，<code>text=auto </code>是一个带有值的属性</li><li>注释：以 # 开头的行是注释，将被 Git 忽略</li></ul><p>示例：</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 设置所有文件的行尾风格为 LF</span></span>
<span class="line"><span style="color:#BABED8;">* </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">auto </span><span style="color:#F07178;">eol</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">lf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 设置 .md 和 .txt 文件的 diff 算法为 diff=markdown 和 diff=plaintext</span></span>
<span class="line"><span style="color:#BABED8;">*.md </span><span style="color:#F07178;">diff</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">markdown</span></span>
<span class="line"><span style="color:#BABED8;">*.txt </span><span style="color:#F07178;">diff</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">plaintext</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 设置 .lock 文件的合并策略为 merge=ours</span></span>
<span class="line"><span style="color:#BABED8;">*.lock </span><span style="color:#F07178;">merge</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">ours</span></span></code></pre></div><br><h3 id="git-标准属性" tabindex="-1">Git 标准属性 <a class="header-anchor" href="#git-标准属性" aria-label="Permalink to &quot;Git 标准属性&quot;">​</a></h3><p>1、text</p><p>将文件标记为文本文件，这决定了 GIt 是否将行尾（换行符）标准化：将匹配的文件添加到 git 时，文件的行尾会被规范化为 LF，从 git 仓库复制到工作目录时，行尾可能从 LF 转换为 CRLF。还与<code>eol</code>属性，Git 配置和平台有关</p><p>当设置为<code>&quot;auto&quot;</code>时，Git 会自行决定文件是文本文件还是二进制文件。如果是文本，并且文件尚未在 Git 中使用 CRLF 结尾，则行结尾将在签入和签出时转换。否则，在签入或签出时不会进行任何转换。</p><p>2、eol</p><p>设置文件的行尾风格，仅在 <code>text=auto</code> 时有效。</p><p>可以设置为：</p><ul><li><code>lf</code>：推荐，使用 LF（Unix/Linux 风格）行尾格式</li><li><code>crlf</code>：使用 CRLF（Windows 风格）行尾格式。</li><li><code>cr</code>：使用 CR（旧版 Mac 风格）行尾格式。</li></ul><p>3、binary</p><p>表示文件是二进制文件，不应尝试进行行尾标准化或进行 diff</p><p>4、diff</p><p>指定用于文件的 diff 算法</p><p>5、merge</p><p>指定用于文件的合并策略</p><p>6、filter</p><p>指定用于文件的过滤器</p><p>7、export-ignore</p><p>指定在创建归档文件（如 tar 或 zip 文件）时应忽略的路径</p><p>8、export-subst</p><p>在导出操作期间，Git 将在文件中的 $Format: 字符串后面填充各种 SHA-1 值</p><p>9、ident</p><p>Git 将在 $Id: 字符串后面填充 SHA-1 值</p><p>10、working-tree-encoding</p><p>指定文件的工作树编码。</p><br><h3 id="github-专有属性" tabindex="-1">GitHub 专有属性 <a class="header-anchor" href="#github-专有属性" aria-label="Permalink to &quot;GitHub 专有属性&quot;">​</a></h3><p>1、<code>linguist-vendored</code></p><p>标记文件或目录为第三方代码。这些文件在语言统计中将被忽略，并在 diff 视图中折叠</p><p>2、<code>linguist-generated</code></p><p>标记文件为自动生成的。这些文件在 diff 视图中将被折叠，并在语言统计中被忽略</p><p>3、<code>linguist-documentation</code></p><p>标记文件为文档。这些文件在语言统计中将被忽略</p><p>4、<code>linguist-language</code></p><p>覆盖 Linguist 的语言检测结果。例如，你可以将一个 .js 文件标记为 TypeScript：<code>*.js linguist-language=TypeScript</code></p><p>上述这些 GitHub 特有属性，主要是给 GitHub 的语言检测工具 Linguist 使用的。</p><br><h3 id="linguist" tabindex="-1">Linguist <a class="header-anchor" href="#linguist" aria-label="Permalink to &quot;Linguist&quot;">​</a></h3><p><strong><a href="https://github.com/github-linguist/linguist" target="_blank" rel="noreferrer">Linguist</a></strong> 是 GitHub 开发的一个开源工具，主要用于在 GitHub 仓库中执行语言检测和语法高亮。它的主要功能包括：</p><ul><li>语言检测：Linguist 可以检测仓库中的文件类型，并根据文件类型进行语言统计。这些统计结果会显示在仓库的语言栏中</li><li>语法高亮：Linguist 使用语言语法文件（通常是 .tmLanguage 文件）来为 GitHub 上的代码提供语法高亮</li><li>文件属性识别：Linguist 可以识别文件的一些属性，例如是否是文档、是否是生成的代码、是否是第三方代码等。这些属性可以在 .gitattributes 文件中设置，并会影响到语言统计和 diff 视图</li><li>Linguist 支持大量的编程语言，包括但不限于 JavaScript、TypeScript、Python、Java、C++、Ruby 等。它的语言支持是通过语言语法文件和一组 heuristics（启发式规则）来实现的。</li></ul>`,58),n=[l];function p(o,r,c,d,u,g){return e(),a("div",null,n)}const f=t(i,[["render",p]]);export{b as __pageData,f as default};
