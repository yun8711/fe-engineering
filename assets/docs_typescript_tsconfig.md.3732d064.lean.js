import{_ as s,v as a,b as n,R as o}from"./chunks/framework.8277b2e6.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/typescript/tsconfig.md","filePath":"docs/typescript/tsconfig.md","lastUpdated":1708623445000}'),l={name:"docs/typescript/tsconfig.md"},p=o(`<h1>tsconfig.json配置详解</h1><p>v5.2（2023.08.26）</p><p><a href="https://www.typescriptlang.org/zh/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">官网</a> | <a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">中文网</a> | <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noreferrer">配置项列表</a> | <a href="https://github.com/tsconfig/bases/" target="_blank" rel="noreferrer">官方推荐配置</a> | <a href="http://json.schemastore.org/tsconfig" target="_blank" rel="noreferrer">json scheme</a></p><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h2><p>字符串数组，由文件路径组成，指定要包含在编译中的文件列表</p><ul><li>如果没有配置 files 或 include，ts 会默认编译当前目录及其子目录中的所有 .ts 或 .tsx 文件</li><li>如果 files 中的文件引入不包含在 files 中的文件，ts 也会尝试编译</li><li>但是，如果文件明确被 exclude 排除了，或者不满足 include 的条件，那么 ts 不会编译这些文件</li></ul><br><h2 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h2><p>字符串，表示要继承的另一个可以被 nodejs 解析的配置文件的路径。</p><p><strong>注意</strong>：除 references 配置外，均可以被继承，但是不允许配置文件之间的循环引用。</p><br><h2 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h2><p>文件路径或glob 字符串数组，相对于 tsconfig.json 所有目录的相对路径，指定 ts 要编译的文件列表</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tests/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><br><h2 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h2><p>文件路径或glob 字符串数组，指定解析 include 时需要跳过的文件或目录，只要是被 exclude 指定的，无论 files 和 include 如何指定，都不会包含在编译列表中。</p><p><strong>注意</strong>：它只是在 include 的文件范围内进行排除</p><br><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><p><strong>通配符</strong></p><ul><li><code>*</code>：匹配 0 或多个字符，不包括目录分隔符</li><li><code>?</code>：匹配 1 个字符，不包括目录分隔符</li><li><code>**/</code>：匹配嵌套到任何级别的任何目录</li></ul><p>如果 glob 字符串最后不包含文件扩展名或其他通配符，则视为目录，并且包含该目录中所支持扩展名的文件（默认支持 .ts、.tsx、.d.ts，如果 allowJs 为 true，则也支持 .js、.jsx）</p><br><p><strong>files、include和exclude</strong></p><p>优先级从高到低依次是：exclude &gt; files &gt; include</p><p>在实际使用中，应该根据项目的需要来决定如何配合使用这三个配置项。</p><p>例如，如果你的项目中只有少数几个文件需要被编译，你可以使用 files 来明确指定这些文件。如果你的项目中有大量文件需要被编译，你可以使用 include 来指定一个匹配这些文件的模式。如果你的项目中有一些文件不应该被编译，你可以使用 exclude 来排除这些文件。</p><h2 id="references" tabindex="-1">references <a class="header-anchor" href="#references" aria-label="Permalink to &quot;references&quot;">​</a></h2><p>v3.0 引入的一个新特性，用于设置项目引用。基于该配置可以将整个工程拆分成多个部分，比如 UI 部分、Hooks 部分以及主应用等等，为它们使用独立的 ts 配置，这样可以让 TypeScript 项目更好地组织代码，提高构建性能，以及改善编辑器的体验。</p><p><em>示例</em></p><p>有如下项目结构</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">PROJECT</span></span>
<span class="line"><span style="color:#BABED8;">├── app</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── tsconfig.json</span></span>
<span class="line"><span style="color:#BABED8;">├── core</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── tsconfig.json</span></span>
<span class="line"><span style="color:#BABED8;">├── ui</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── tsconfig.json</span></span>
<span class="line"><span style="color:#BABED8;">├── utils</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#BABED8;">│   ├── tsconfig.json</span></span>
<span class="line"><span style="color:#BABED8;">├── tsconfig.base.json</span></span></code></pre></div><p>这四个项目的引用关系是这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">app -&gt; core, ui, utils</span></span>
<span class="line"><span style="color:#babed8;">core -&gt; utils</span></span></code></pre></div><p>这四个项目可以使用完全独立的 tsconfig 配置，如 utils 的 target 为 ES5，而 app 的 target 则可以是 ESNext ，那么检查配置、功能配置等自然也可以不同。</p><p>最终在 <code>app/tsconfig.json</code> 中定义引用关系：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../tsconfig.base.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">target</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ESNext</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ESNext</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">baseUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">outDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../dist/app</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./**/*.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">references</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../utils</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../core</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../ui</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这里的 outDir 被配置为父级目录，因为我们仍然希望这四个项目的构建产物被放置在同一个文件夹下，你也可以根据自己的实际需要定制。</p><br><h2 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h2><h3 id="language-and-environment" tabindex="-1">Language and Environment <a class="header-anchor" href="#language-and-environment" aria-label="Permalink to &quot;Language and Environment&quot;">​</a></h3><h4 id="target-编译目标" tabindex="-1">target - 编译目标 <a class="header-anchor" href="#target-编译目标" aria-label="Permalink to &quot;target - 编译目标&quot;">​</a></h4><p>默认：<code>ES3</code>，类型：<code>string</code>，设置编译后要兼容的 js 版本</p><p>可选值：es3/5/6/2015~2022/next，esnext 表示当前 ts 支持的最高版本，如无特殊需求，推荐设置为 <code>&quot;es2018&quot;</code>，对常用语法支持较为全面的版本。如果只使用 Nodejs，应该基于 node 版本设置 target，可以通过 <a href="https://node.green/" target="_blank" rel="noreferrer">node.green</a> 的支持数据库查询相应的版本</p><p>target 的配置会改变 lib 选项的默认值，而 lib 决定了能否使用某个版本的语法特性，以 replaceAll 为例，如果在项目中直接使用，会给出一个错误提示：<em><strong>属性“replaceAll”在类型“&quot;linbudu&quot;”上不存在。是否需要更改目标库? 请尝试将 “lib” 编译器选项更改为“es2021”或更高版本</strong></em>。解决此问题，可以在配置 lib 中包含 <code>&quot;es2021&quot;</code> 或者 <code>&quot;es2021.String&quot;</code></p><h4 id="lib-库文件" tabindex="-1">lib - 库文件 <a class="header-anchor" href="#lib-库文件" aria-label="Permalink to &quot;lib - 库文件&quot;">​</a></h4><p>类型：<code>string[]</code>，指定编译环境需要包含的库文件，</p><p>ts 在编译时会自动加载内置的 <code>lib.d.ts</code> 等声明文件，这些库文件包含了代码在运行时可能会用到的全局变量、类型、函数等，而 lib 配置就决定了加载哪些库文件。</p><p>这个配置需要根据项目的实际运行的环境来设定，比如：项目需要运行在浏览器中，那么就需要添加 <code>DOM</code> ，它包含了 window、document 等全局变量，但是如果项目仅在 node 环境下运行，那么就不需要 <code>DOM</code> 库</p><p>可以在源码中查看支持的库文件：<code>node_modules/typescript/lib</code></p><p><strong>注意</strong>：</p><ul><li>lib 配置项只影响 ts 编译的行为，添加相应的库文件，主要是为了在编译时可以识别预设环境中所包含的全局变量、类型、函数等，不会影响你的代码在运行时的行为，如果代码在运行时的环境中实际上并没有这些全局变量和函数，那么你的代码在运行时仍然会报错。</li><li>target 会影响 lib 的默认值，一般情况下，lib 会自动获取与 target 指定的版本对应的库文件。比如 target 为 <code>&quot;es2021&quot;</code> 时，不需要专门添加 <code>&quot;es2021&quot;</code> 到 lib 中也能使用 ES2021 的 replaceAll 方法，因为既然你的编译产物都到这个版本了，当然可以直接使用这个方法</li></ul><h3 id="modules-模块" tabindex="-1">Modules 模块 <a class="header-anchor" href="#modules-模块" aria-label="Permalink to &quot;Modules 模块&quot;">​</a></h3><h4 id="baseurl-基准路径" tabindex="-1">baseUrl - 基准路径 <a class="header-anchor" href="#baseurl-基准路径" aria-label="Permalink to &quot;baseUrl - 基准路径&quot;">​</a></h4><p>默认：<code>.</code>，类型：<code>string</code>，设置一个基准路径，用作解析非绝对模块名的基准目录，例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">project</span></span>
<span class="line"><span style="color:#babed8;">├── ex.ts</span></span>
<span class="line"><span style="color:#babed8;">├── hello</span></span>
<span class="line"><span style="color:#babed8;">│   └── world.ts</span></span>
<span class="line"><span style="color:#babed8;">└── tsconfig.json</span></span></code></pre></div><p>在 ex.ts 中</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { helloWorld } from &quot;hello/world&quot;;</span></span></code></pre></div><p>使用 <code>&quot;baseUrl&quot;: &quot;./&quot;</code> ，TypeScript 将查找与 <code>tsconfig.json</code>同级目录</p><h4 id="module-模块系统" tabindex="-1">module - 模块系统 <a class="header-anchor" href="#module-模块系统" aria-label="Permalink to &quot;module - 模块系统&quot;">​</a></h4><p>默认：<code>CommonJS</code>，指定编辑器使用哪种模块系统编译代码</p><p>target 为 es3/es5 时，默认值为 commonjs，可选值参考 <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="noreferrer">模块</a> 查看更多信息，</p><p>一般在前端项目指定 <code>ESNext</code>，也就是可以使用 import 和 export 语句来导入和导出模块，而 TypeScript 编译器会将这些语句编译为相应的 ECMAScript 语句。</p><h4 id="moduleresolution-模块解析策略" tabindex="-1">moduleResolution - 模块解析策略 <a class="header-anchor" href="#moduleresolution-模块解析策略" aria-label="Permalink to &quot;moduleResolution - 模块解析策略&quot;">​</a></h4><p>参考 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">官网-模块解析</a> <a href="https://www.patrickzhong.com/TypeScript/zh/reference/module-resolution.html" target="_blank" rel="noreferrer">ts使用手册-模块解析</a> <a href="https://zhuanlan.zhihu.com/p/621795173?utm_id=0" target="_blank" rel="noreferrer">知乎- moduleResolution 总结</a></p><p>指定 TypeScript 模块解析策略，简单的说就是使用 node 哪个版本来解析模块，可选值有：</p><ul><li>classic：v1.6 之前使用，当前可以完全弃用</li><li>node/node10：早期 ts 只支持 classic 和 node，所以 node 是 node10 的早期名称，仅支持 commonjs，模仿 nodejs运行时的解析策略在编译阶段定位模块文件</li><li>node16：支持 <code>exports</code> ，同时增加了 esm 限制，例如文件必须带扩展名，所以此时必须设置 package.json 中的 type:module 来明确开启 esm</li><li>nodenext：最新的 nodejs 模块解析策略，所以是兼容 <code>node16</code> 的</li><li>budler：与 node16、nodenext 相似，但是不需要文件后缀名的声明</li></ul><h4 id="paths-路径设置" tabindex="-1">paths - 路径设置 <a class="header-anchor" href="#paths-路径设置" aria-label="Permalink to &quot;paths - 路径设置&quot;">​</a></h4><p>类似于 Webpack 中的 alias，用来声明如何解析 require、imports 中的导入，允许通过 <code>@/utils</code> 或类似的方式来简化导入路径</p><p>默认情况下，paths 的解析是基于 baseUrl 作为相对路径的，因此需要确保指定了 baseUrl 。在填写别名路径时，我们可以传入一个数组，TypeScript 会依次解析这些路径，直到找到一个确实存在的路径。</p><h4 id="resolvejsonmodule" tabindex="-1">resolveJsonModule <a class="header-anchor" href="#resolvejsonmodule" aria-label="Permalink to &quot;resolveJsonModule&quot;">​</a></h4><p>默认：类型：<code>boolean</code>，指定编译器是否允许导入 json 模块。</p><p>启用了这一配置后，就可以直接导入 Json 文件，并获得基于实际 Json 内容的类型推导。</p><h4 id="rootdir" tabindex="-1">rootDir <a class="header-anchor" href="#rootdir" aria-label="Permalink to &quot;rootDir&quot;">​</a></h4><p>默认值为：项目内<strong>包括</strong>的所有 .ts 文件，非声明文件（.d.ts）的最长公共路径，这里要注意：</p><ul><li><strong>包括</strong>指的是 include 或 files 中包括的 <code>.ts</code> 文件，这些文件一般来说不会和 tsconfig.json 位于同一目录层级；</li><li>不包括 <code>.d.ts</code> 文件，因为声明文件可能会和 tsconfig.json 位于同一层级</li></ul><p>最长公共路径，就是某一个包含了所有.ts 文件的目录，ts 会找到这个目录，并作为默认的 rootDir。</p><p>示例：下面的目录，rootDir 会被推断为 src。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">PROJECT</span></span>
<span class="line"><span style="color:#babed8;">├── src</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── utils</span></span>
<span class="line"><span style="color:#babed8;">│   │   ├── helpers.ts</span></span>
<span class="line"><span style="color:#babed8;">├── declare.d.ts</span></span>
<span class="line"><span style="color:#babed8;">├── tsconfig.json</span></span></code></pre></div><p>示例：rootDir 会被推断为 <code>.</code>，即 <code>tsconfig.json</code> 所在的目录</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">PROJECT</span></span>
<span class="line"><span style="color:#babed8;">├── env</span></span>
<span class="line"><span style="color:#babed8;">│   ├── env.dev.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── env.prod.ts</span></span>
<span class="line"><span style="color:#babed8;">├── app</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#babed8;">├── declare.d.ts</span></span>
<span class="line"><span style="color:#babed8;">├── tsconfig.json</span></span></code></pre></div><p><strong>注意</strong>：构建产物的目录结构会受到这一配置的影响，假设 outDir 被配置为 <code>dist</code>，在上面的第一种情况下，最终的产物会被全部放置在 dist 目录下，保持它们在 <code>src</code>（也就是 rootDir） 内的目录结构：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">PROJECT</span></span>
<span class="line"><span style="color:#babed8;">├── dist</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.js</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.d.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── app.js</span></span>
<span class="line"><span style="color:#babed8;">│   ├── app.d.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── utils</span></span>
<span class="line"><span style="color:#babed8;">│   │   ├── helpers.js</span></span>
<span class="line"><span style="color:#babed8;">│   │   ├── helpers.d.ts</span></span>
<span class="line"><span style="color:#babed8;">├── src</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── utils</span></span>
<span class="line"><span style="color:#babed8;">│   │   ├── helpers.ts</span></span></code></pre></div><p>如果将 rootDir 更改为推导得到的 rootDir 的父级目录，比如在这里把它更改到了项目根目录 <code>.</code>。此时 <code>src</code> 会被视为 rootDir 的一部分，因此最终构建目录结构中会多出 <code>src</code> 这一级：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">PROJECT</span></span>
<span class="line"><span style="color:#babed8;">├── dist</span></span>
<span class="line"><span style="color:#babed8;">│    ├─src</span></span>
<span class="line"><span style="color:#babed8;">│      ├── index.js</span></span>
<span class="line"><span style="color:#babed8;">│      ├── index.d.ts</span></span>
<span class="line"><span style="color:#babed8;">│      ├── app.js</span></span>
<span class="line"><span style="color:#babed8;">│      ├── app.d.ts</span></span>
<span class="line"><span style="color:#babed8;">│      ├── utils</span></span>
<span class="line"><span style="color:#babed8;">│      │   ├── helpers.js</span></span>
<span class="line"><span style="color:#babed8;">│      │   ├── helpers.d.ts</span></span>
<span class="line"><span style="color:#babed8;">├── src</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── utils</span></span>
<span class="line"><span style="color:#babed8;">│   │   ├── helpers.ts</span></span></code></pre></div><p>需要注意的是，如果显式指定 rootDir ，需要确保其包含了所有 <strong>“被包括”</strong> 的文件，因为 TypeScript 需要确保这所有的文件都被生成在 outDir 内。比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">PROJECT</span></span>
<span class="line"><span style="color:#babed8;">├── src</span></span>
<span class="line"><span style="color:#babed8;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── app.ts</span></span>
<span class="line"><span style="color:#babed8;">│   ├── utils</span></span>
<span class="line"><span style="color:#babed8;">│   │   ├── helpers.ts</span></span>
<span class="line"><span style="color:#babed8;">├── env.ts</span></span>
<span class="line"><span style="color:#babed8;">├── tsconfig.json</span></span></code></pre></div><p>在这个例子中，如果你指定 rootDir 为 <code>src</code> ，会导致 <code>env.ts</code> 被生成到 <code>&lt;project&gt;/env.js</code> 而非 <code>&lt;project&gt;/dist/env.js</code> 。</p><h4 id="types-类型" tabindex="-1">types - 类型 <a class="header-anchor" href="#types-类型" aria-label="Permalink to &quot;types - 类型&quot;">​</a></h4><p>默认情况下，TypeScript 会加载 <code>node_modules/@types/</code> 下的所有声明文件，包括嵌套的 <code>../../node_modules/@types</code> 路径，这么做可以让你更方便地使用第三方库的类型。</p><p>当指定 types 时，则只有列出的包才会被包含在全局范围内</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这种情况下，只有 <code>@types/node</code>、<code>@types/jest</code> 以及 <code>@types/react</code> 会被加载到全局。</p><h4 id="typeroots" tabindex="-1">typeRoots <a class="header-anchor" href="#typeroots" aria-label="Permalink to &quot;typeRoots&quot;">​</a></h4><p>希望改变加载 <code>@types/</code> 下文件的行为，可以使用 typeRoots 选项，其默认为 <code>@types</code>，即指定 <code>node_modules/@types</code> 下的所有文件（仍然包括嵌套的）。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">typeRoots</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./node_modules/@types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./node_modules/@team-types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./typings</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">skipLibCheck</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上配置会尝试加载 <code>node_modules/@types/react</code> 以及 <code>./node_modules/@team-types/react</code> 、<code>./typings/react</code> 中的声明文件，注意我们需要使用<strong>相对于 baseUrl 的相对路径</strong>。</p><p>加载多个声明文件可能会导致内部的声明冲突，所以你可能会需要 skipLibCheck 配置来禁用掉对加载的类型声明的检查。</p><h3 id="javascript-support-js支持" tabindex="-1">JavaScript Support - js支持 <a class="header-anchor" href="#javascript-support-js支持" aria-label="Permalink to &quot;JavaScript Support - js支持&quot;">​</a></h3><h4 id="allowjs-允许-js" tabindex="-1">allowJs - 允许 js <a class="header-anchor" href="#allowjs-允许-js" aria-label="Permalink to &quot;allowJs - 允许 js&quot;">​</a></h4><p>类型：<code>boolean</code>，默认：</p><p>允许在项目中使用 js 代码，而不仅仅只能使用.ts、.tsx 文件</p><h3 id="emit" tabindex="-1">Emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;Emit&quot;">​</a></h3><h4 id="outdir-输出目录" tabindex="-1">outDir - 输出目录 <a class="header-anchor" href="#outdir-输出目录" aria-label="Permalink to &quot;outDir - 输出目录&quot;">​</a></h4><p>构建产物的输出目录，会按照原来的目录结构输出。</p><p>如果没有指定，则编译后的 js 文件将与源 ts 文件在相同目录中；如果指定了，则编译后的 js（以及 <code>.d.ts</code>, <code>.js.map</code> 等）将会被生成到这个目录下，源文件的目录仍将会被保留。</p><h4 id="sourcemap" tabindex="-1">sourceMap <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;sourceMap&quot;">​</a></h4><p>类型：<code>boolean</code>，默认：</p><p>是否生成源码映射文件，如果设置为 true，则在输出.js 文件的同时输出.js.map（或.jsx.map）</p><h4 id="removecomments-移除注释" tabindex="-1">removeComments - 移除注释 <a class="header-anchor" href="#removecomments-移除注释" aria-label="Permalink to &quot;removeComments - 移除注释&quot;">​</a></h4><p>默认为 false，是否在转换为 js 时从 ts 中删除所有注释，</p><h3 id="interop-constraints-互操作约束" tabindex="-1">Interop Constraints 互操作约束 <a class="header-anchor" href="#interop-constraints-互操作约束" aria-label="Permalink to &quot;Interop Constraints 互操作约束&quot;">​</a></h3><h4 id="allowsyntheticdefaultimports-允许合成默认导入" tabindex="-1">allowSyntheticDefaultImports - 允许合成默认导入 <a class="header-anchor" href="#allowsyntheticdefaultimports-允许合成默认导入" aria-label="Permalink to &quot;allowSyntheticDefaultImports - 允许合成默认导入&quot;">​</a></h4><p>是否允许从没有默认导出的模块中默认导入，默认：false</p><h4 id="esmoduleinterop-es-模块互操作" tabindex="-1">esModuleInterop - es 模块互操作 <a class="header-anchor" href="#esmoduleinterop-es-模块互操作" aria-label="Permalink to &quot;esModuleInterop - es 模块互操作&quot;">​</a></h4><p>这两个配置主要还是为了解决 ES Module 和 CommonJS 之间的兼容性问题。</p><p><strong>简单的说</strong>：CJS中没有默认导出的概念，所以在 ESM 中使用默认导入方式导入 CJS 模块时会发生错误或者一些异常。esModuleInterop 配置为 true 时，ts 会更改编译器中的行为，避免错误。所以当项目中 ESM 和 CJS 模块混合使用，或者在 ESM 项目中引用一些旧的不兼容 ESM 标准的 CJS 模块时，需要开启 esModuleInterop，同时也会默认开启 allowSyntheticDefaultImports。</p><p>通常情况下，ESM 调用 ESM，CJS 调用 CJS，都不会有问题。但如果是 ESM 调用 CJS ，就可能遇到奇怪的问题。比如 React 中的源码中是这样导出的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// react/cjs/react.development.js</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#BABED8;">Children </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Children</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#BABED8;">useState </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#BABED8;">memo </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> memo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#BABED8;">useEffect </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> useEffect</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>假设我们分别使用具名导入、默认导入和命名空间导入来导入 React：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">useRef</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 具名导入（named import）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 默认导入（default import）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> ReactCopy </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 命名空间导入（namespace import）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(useRef)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(React</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useState)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(ReactCopy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useEffect)</span></span></code></pre></div><p>这样的代码在默认情况下（即没有启用 esModuleInterop）会被编译为：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">exports,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__esModule</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> react_1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> react_2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> ReactCopy </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(react_1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useRef)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(react_2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">default</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useState)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(ReactCopy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useEffect)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>可以看到，默认导入的调用被转换为了 <code>react_2.default</code>，而具名导入和命名空间则不变，三种导入语句都被转换为了 CJS。</p><p>这是因为 TypeScript 默认将 CommonJs 也视为 ES Module 一样，对于具名导入，可以直接将 <code>module.exports.useRef = useRef</code> 和 <code>export const useRef = useRef </code>等价。</p><p>但是 CommonJs 中并没有这个“默认导出”这个概念， 只能将 ES Module 中的默认导出 <code>export default</code> 强行等价于 <code>module.exports.default</code>，如上面的编译结果中的 <code>react_2.default</code>。这里的 default 就是一个属性名，和 <code>module.exports.foo</code> 是一个概念。</p><p>但 CommonJs 下存在着类似“命名空间导出”的概念，即 <code>const react = require(&quot;react&quot;) </code>可以等价于 <code>import * as React from &quot;react&quot;</code>。</p><p>很明显，对于默认导出的情况，由于 React 中并没有使用 <code>module.exports.default</code> 提供（模拟）一个默认导出，因此 <code>react_2.default</code> 只可能是 undefined。</p><p>为了解决这种情况，TypeScript 中支持通过 esModuleInterop 配置来在 ESM 导入 CJS 这种情况时引入额外的辅助函数，进一步对兼容性进行支持，如上面的代码在开启配置后的构建产物会是这样的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> __createBinding </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">__createBinding) </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> (Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">create </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">o</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">m</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">k2</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//... }));</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">__setModuleDefault</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">__setModuleDefault</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">create</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">o</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//... });</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">__importStar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">__importStar</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//... };</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">__importDefault</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">__importDefault</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">mod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__esModule</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">exports,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__esModule</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">react_1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">react_2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__importDefault</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ReactCopy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__importStar</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">react_1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useRef</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">react_2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">default</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useState</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ReactCopy</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">useEffect</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这些辅助函数会确保 ESM 的默认导入（<code>__importDefault</code>） 与命名空间导入 （<code>__importStar</code>）能正确地对应到 CJS 中的导出，如<code> __importDefault</code> 会检查目标模块的使用规范，对 ESM 模块直接返回，否则将其挂载在一个对象的 default 属性上：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> react_2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">__importDefault</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 转换结果等价于以下</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> react_2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">useState</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>而 <code>__importStar</code> （即命名空间导入的辅助函数）的实现则要复杂一些：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> __importStar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">__importStar) </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">mod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__esModule</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">mod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">k</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">hasOwnProperty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">mod</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;">)) </span><span style="color:#82AAFF;">__createBinding</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">k</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">__setModuleDefault</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">mod</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>它会在目标模块不是 ESM 规范时，将模块中除了 default 属性以外的导出都挂载到返回对象上（<code>__createBinding</code>），然后将这个对象的 default 属性设置为原本的模块信息（<code>__setModuleDefault</code>）。这样你既可以 <code>ReactCopy.useEffect</code> 访问某个值，也可以 <code>ReactCopy.default</code> 访问原本的模块。</p><p>这些辅助方法也属于 <code>importHelpers</code> 中的 helper，因此你也可以通过启用 <code>importHelpers</code> 配置来从 tslib 导入这些辅助方法。</p><p>实际上，由于 React 本身是通过 CommonJs 导出的，在你使用默认导入时， TS 也会提醒你此模块只能在启用了 <code>esModuleInterop</code> 的情况下使用默认导入。</p><p>启用 <code>esModuleInterop</code> 配置的同时，也会启用 <code>allowSyntheticDefaultImports</code> 配置，这一配置会为没有默认导出的 CJS 模块“模拟”出默认的导出，以提供更好的类型提示。如以下代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// handlers.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">errorHandler</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> handlers </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./handlers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">onerror </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> handlers</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">errorHandler</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>虽然这段代码转换后的实际逻辑没有问题，但由于这里并不存在 <code>module.exports.default</code> 导出，会导致在类型上出现一个错误。</p><p>启用 <code>allowSyntheticDefaultImports</code> 配置会在这种情况下将 handlers 中的代码模拟为以下的形式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> allHandlers </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">errorHandler</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> allHandlers</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#BABED8;">default </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> allHandlers</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>然后在导入方就能够获得正确的类型提示了，实际上这也是 Babel 实际的构建效果，但需要注意的是在 TypeScript 中 <code>allowSyntheticDefaultImports</code> 配置并不会影响最终的代码生成（不像 <code>esModuleInterop</code> 那样），只会对类型检查有帮助。</p><h4 id="esmoduleinterop-es-模块互操作性" tabindex="-1">esModuleInterop - es 模块互操作性 <a class="header-anchor" href="#esmoduleinterop-es-模块互操作性" aria-label="Permalink to &quot;esModuleInterop - es 模块互操作性&quot;">​</a></h4><p>默认情况下（未设置 <code>esModuleInterop</code> 或值为 false），TypeScript 像 ES6 模块一样对待 CommonJS/AMD/UMD。</p><p><strong>一般设置为 true</strong>，同时会启用 allowSyntheticDefaultImports</p><h4 id="forceconsistentcasinginfilenames-文件系统大小写" tabindex="-1">forceConsistentCasingInFileNames - 文件系统大小写 <a class="header-anchor" href="#forceconsistentcasinginfilenames-文件系统大小写" aria-label="Permalink to &quot;forceConsistentCasingInFileNames - 文件系统大小写&quot;">​</a></h4><p>默认：<code>false</code>，</p><p>是否区分文件系统大小写规则，默认不区分大小写</p><h3 id="type-checking-类型检查" tabindex="-1">Type Checking 类型检查 <a class="header-anchor" href="#type-checking-类型检查" aria-label="Permalink to &quot;Type Checking 类型检查&quot;">​</a></h3><h4 id="strict-严格模式" tabindex="-1">strict - 严格模式 <a class="header-anchor" href="#strict-严格模式" aria-label="Permalink to &quot;strict - 严格模式&quot;">​</a></h4><p>是否启用严格模式，它是一组规则的总开关，开启 strict 会默认将这些规则全部启用，这些规则包括：</p><ul><li><code>alwaysStrict</code>、<code>useUnknownInCatchVariables</code></li><li><code>noFallthroughCasesInSwitch</code>、<code>noImplicitAny</code>、<code>noImplicitThis</code></li><li><code>strictNullChecks</code>、<code>strictBindCallApply</code>、<code>strictFunctionTypes</code>、<code>strictPropertyInitialization</code></li></ul><h4 id="nounusedlocals-未使用的局部变量" tabindex="-1">noUnusedLocals - 未使用的局部变量 <a class="header-anchor" href="#nounusedlocals-未使用的局部变量" aria-label="Permalink to &quot;noUnusedLocals - 未使用的局部变量&quot;">​</a></h4><p>默认为 true，设置是否报告未使用的局部变量的错误，设置为false 不报错，</p><h3 id="completeness-完整性" tabindex="-1">Completeness 完整性 <a class="header-anchor" href="#completeness-完整性" aria-label="Permalink to &quot;Completeness 完整性&quot;">​</a></h3><h4 id="skiplibcheck-与-skipdefaultlibcheck" tabindex="-1">skipLibCheck 与 skipDefaultLibCheck <a class="header-anchor" href="#skiplibcheck-与-skipdefaultlibcheck" aria-label="Permalink to &quot;skipLibCheck 与 skipDefaultLibCheck&quot;">​</a></h4><p>默认情况下，TypeScript 会对加载的类型声明文件也进行检查，包括内置的 <code>lib.d.ts</code> 系列与 <code>@types/</code> 下的声明文件。在某些时候，这些声明文件可能存在冲突，比如两个不同来源的声明文件使用不同的类型声明了一个全局变量。此时，你就可以使用 skipLibCheck 跳过对这些类型声明文件的检查，这也能进一步加快编译速度。</p><p>TypeScript 不会对所有 <code>d.ts</code> 文件进行全面检查，而是只检查在代码中特别引用的代码。</p><p><code>skipDefaultLibCheck</code> 类似于 <code>skipLibCheck</code> ，但它只会跳过那些使用了 <code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code> 指令的声明文件（如内置的 <code>lib.d.ts</code>），这一三斜线指令的作用即是<strong>将此文件标记为默认库声明</strong>，因此开启这一配置后，编译器在处理其文件时不会再尝试引入默认库声明。</p><h3 id="backwards-compatibility-向后兼容性" tabindex="-1">Backwards Compatibility 向后兼容性 <a class="header-anchor" href="#backwards-compatibility-向后兼容性" aria-label="Permalink to &quot;Backwards Compatibility 向后兼容性&quot;">​</a></h3><h4 id="suppressimplicitanyindexerrors" tabindex="-1">suppressImplicitAnyIndexErrors <a class="header-anchor" href="#suppressimplicitanyindexerrors" aria-label="Permalink to &quot;suppressImplicitAnyIndexErrors&quot;">​</a></h4><p>启用时，可以禁止在索引到对象时报告有关隐式 anys 的错误</p><h2 id="ts-node" tabindex="-1">ts-node <a class="header-anchor" href="#ts-node" aria-label="Permalink to &quot;ts-node&quot;">​</a></h2><h2 id="vuecompileroptions" tabindex="-1">vueCompilerOptions <a class="header-anchor" href="#vuecompileroptions" aria-label="Permalink to &quot;vueCompilerOptions&quot;">​</a></h2>`,166),e=[p];function t(c,r,y,D,i,F){return a(),n("div",null,e)}const B=s(l,[["render",t]]);export{u as __pageData,B as default};
