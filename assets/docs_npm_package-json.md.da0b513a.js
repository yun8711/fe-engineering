import{_ as s,v as a,b as n,R as o}from"./chunks/framework.8277b2e6.js";const p="/fe-engineering/assets/semver.e4f20ac8.png",q=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":false,"next":{"text":"package-lock.json","link":"/docs/npm/package-lock"}},"headers":[],"relativePath":"docs/npm/package-json.md","filePath":"docs/npm/package-json.md","lastUpdated":1696766127000}'),l={name:"docs/npm/package-json.md"},e=o('<h1>package.json</h1><p>npm v9.8.0 nodejs v20</p><p><a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json?v=true#keywords" target="_blank" rel="noreferrer">官网</a></p><p>示例：<a href="https://github.com/facebook/react/blob/main/package.json" target="_blank" rel="noreferrer">react</a> | <a href="https://github.com/vuejs/vue/blob/main/package.json" target="_blank" rel="noreferrer">vue</a> | <a href="https://github.com/element-plus/element-plus/blob/dev/package.json" target="_blank" rel="noreferrer">element-plus</a> | <a href="https://github.com/ant-design/ant-design/blob/master/package.json" target="_blank" rel="noreferrer">ant-design</a></p><p>参考文章：<a href="https://juejin.cn/post/7145001740696289317" target="_blank" rel="noreferrer">字节跳动技术团队 - package.json 配置完全解读</a></p><h2 id="描述配置" tabindex="-1">描述配置 <a class="header-anchor" href="#描述配置" aria-label="Permalink to &quot;描述配置&quot;">​</a></h2><p>主要是描述项目的基本信息，部分会展示在 npm 官网上。</p><p>name 和 version 是最重要的字符，它们也是必须的，npm 规定 package.json 文件由 name和version 一起组成唯一标识符，如果没有就无法执行<code>npm install</code>。</p><br><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>项目名称，其他人可以通过该名称找到你的包，并进行安装。</p><p>命名规则：</p><ul><li><p>长度&lt;=214个字符，不能以<code>.</code>和<code>_</code>开头，不能包含大写字母，这是因为当软件包在 npm 上发布时，会基于此属性获得自己的 URL，所以不能包含非 URL 安全字符（non-url-safe）</p><p>不安全的URL字符：空格、大小于号、方括号、花括号、竖线、反斜杠<code>\\</code>、插入号<code>^</code>、百分号</p></li><li><p>这个名字会作为参数被传入<code>require()</code> 或者 <code>import</code>，所以它应该简短、语义化</p></li><li><p>名称不能和其他包重复，可以使用<code>npm view &lt;包名&gt;</code>命令查询模块是否重复（不重复会提示404），或去npm registry查看一下这个名字是否已经被使用了</p></li><li><p>不要使用与 node 模块相同的名称</p></li><li><p>可以使用 npm-scope （私源）作为前缀，格式是：<code>@[scope]/[name]</code>， 比如：<code>@vue/cli</code></p></li></ul><br><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h3><p>项目的版本号，开源项目的版本号必须可由<a href="https://github.com/isaacs/node-semver" target="_blank" rel="noreferrer">node-semver</a> 解析，它是 npm 的依赖项，所以 version 需要遵循 semver 语义化规范，简单的规则如下所示：</p><p><img src="'+p+`" alt="图片"></p><p>Major：主版本号，通常在涉及重大功能更新，产生了破坏性变更时会更新此版本号</p><p>Minor：次版本号，在引入了新功能，但未产生破坏性变更，依然向下兼容时会更新此版本号</p><p>Patch：修订号，在修复了一些问题，也未产生破坏性变更时会更新此版本号</p><p>Pre-release：先行版本，如果某个版本的改动较大，并且不稳定，可能如法满足预期的兼容性需求，就需要发布先行版本，先行版本通过会加在版本号的后面，通过 “-” 号连接以点分隔的标识符和版本编译信息：内部版本（alpha）、公测版本（beta）和候选版本（rc，即 release candiate）</p><p>Metadata：构建元数据，在补丁或预发布版本后立即添加加号和一系列点分隔的标识符来表示，例如:<code>1.0.0-alpha+001, 1.0.0+20130313144700, 1.0.0-beta+exp.sha.5114f85, 1.0.0+21AF26D3----117B344092BD</code>。标识符必须只包含ASCII字母数字和连字符<code>[0-9A-Za-z-]</code>。标识符不能为空。在确定版本优先级时，必须忽略构建元数据。</p><br><h3 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h3><p>项目的描述，会展示在npm官网，方便在npm search中搜索结果中让别人直接了解包的功能。</p><br><h3 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">​</a></h3><p>字符串数组，一组项目的技术关键词，方便在npm search中搜索。</p><p>好的关键词可以帮助别人在npm官网上更好的检索到此项目，增加曝光率。</p><br><h3 id="author" tabindex="-1">author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;author&quot;">​</a></h3><p>表示项目的作者</p><p>一种是字符串格式，npm会自动解析：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CUGGZ &lt;xxxxx@xx.com&gt; (https://juejin.cn/user/3544481220801815)</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>一种是对象形式：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">author</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CUGGZ</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">email</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxxxx@xx.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://juejin.cn/user/3544481220801815</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>email 和 url 在两种形式中都是可选的。也可以在你的npm用户信息中设置一个顶级的 maintainers 字段。</p><br><h3 id="contributors-⬇️" tabindex="-1">contributors ⬇️ <a class="header-anchor" href="#contributors-⬇️" aria-label="Permalink to &quot;contributors ⬇️&quot;">​</a></h3><p>数组，表示该项目包的贡献者、协作者，数组中每个元素表示一位开发者，书写格式与 author 字段相同</p><p><strong><code>AUTHORS</code>文件</strong></p><p>有的的根目录中有一个<code>AUTHORS</code>文件（可以是 md、html、yaml 等格式），用于列出参与该项目开发的成员，它是一份开发者名单，用来表彰和感谢所有为项目作出贡献的人。它的内容与 contributors 字段一致。</p><p>AUTHORS 文件通常没有固定的文件扩展名，具体名称取决于项目开发者的喜好和约定。一般来说，AUTHORS文件的文件名可能是AUTHORS、CONTRIBUTORS、MAINTAINERS等，其中最常见的是AUTHORS。</p><p>参考：<a href="https://github.com/facebook/react/blob/main/AUTHORS" target="_blank" rel="noreferrer">react - AUTHORS </a></p><br><h3 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-label="Permalink to &quot;homepage&quot;">​</a></h3><p>url 字符串，项目主页的链接，通常是项目 github 链接，项目官网或文档首页。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;homepage&quot;: &quot;https://github.com/vuejs/create-vue#readme&quot;</span></span></code></pre></div><p>通过 <code>npm docs</code> 或 <code>npm home</code>命令能快速打开项目文档</p><br><h3 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;repository&quot;">​</a></h3><p>项目的仓库地址以及版本控制信息。</p><p>一种是对象的形式：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> : </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">git</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 显示的设置版本控制系统，</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://github.com/facebook/react.git</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">// 如果包不在根目录，可以指定它所在的目录</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">directory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/react-dom</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> : </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">svn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://v8.googlecode.com/svn/trunk/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>一种是字符串形式：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">repository</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://github.com/facebook/react.git</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>该 url 地址应该是一个公开可用的（可能是只读）url，可以直接传递给 VCS 程序而无需任何处理，不应该是html 页面的 url。</p><p>通过 <code>npm repo</code> 命令可以快速打开 github 源码页面。</p><br><h3 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;bugs&quot;">​</a></h3><p>项目 bug 反馈地址，通常是 github issue 页面的链接</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;bugs&quot;: &quot;https://github.com/vuejs/core/issues&quot;</span></span></code></pre></div><p>或者是项目的提交问题的地址（url）和邮件地址（email）</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">{</span></span>
<span class="line"><span style="color:#babed8;">  &quot;url&quot; :&quot;http://github.com/owner/project/issues&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;email&quot; : &quot;project@hostname.com&quot;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>如果提供了url，它会被<code>npm bugs</code>命令使用</p><h2 id="脚本配置" tabindex="-1">脚本配置 <a class="header-anchor" href="#脚本配置" aria-label="Permalink to &quot;脚本配置&quot;">​</a></h2><h3 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;scripts&quot;">​</a></h3><p>指定项目的一些内置的脚本命令，是key-value键值对配置，key为可运行的命令，可以通过<code>npm run</code>来执行命令。通常包含项目开发，构建 等 CI 命令。</p><p>除了基本的scripts命令，结合pre和post完成前置和后续操作，脚本命令可以在包不同的生命周期中被执行。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#babed8;">  &quot;dev&quot;: &quot;node index.ts&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;predev&quot;: &quot;node beforeIndex.js&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;postdev&quot;: &quot;node afterIndex.js&quot;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>当执行 <code>npm run dev</code> 命令时，会按照 predev -&gt; dev -&gt; postdev 的顺序依次执行上方的命令。</p><p>（待确认）但是这样的隐式逻辑很可能会造成执行工作流的混乱，所以 pnpm 和 yarn2 都已经废弃掉了这种 pre/post 自动执行的逻辑</p><p><a href="https://docs.npmjs.com/cli/v9/using-npm/scripts" target="_blank" rel="noreferrer">详细文档</a></p><br><h3 id="config-❓⬇️" tabindex="-1">config ❓⬇️ <a class="header-anchor" href="#config-❓⬇️" aria-label="Permalink to &quot;config ❓⬇️&quot;">​</a></h3><p>用来配置scripts里的脚本在运行时的参数，使用较少。在实例中，如果一个包有下面的配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">{</span></span>
<span class="line"><span style="color:#babed8;">  &quot;name&quot; : &quot;foo&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;config&quot; : { &quot;port&quot; : &quot;8080&quot; }</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>如果运行 npm run start，则 port 字段会映射到<code>npm_package_config_port</code>环境变量中：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">env</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">npm_package_config_port)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 8080</span></span></code></pre></div><p>用户可以通过<code>npm config set foo:port 3001</code> 命令来重写 port 的值。</p><h2 id="依赖配置" tabindex="-1">依赖配置 <a class="header-anchor" href="#依赖配置" aria-label="Permalink to &quot;依赖配置&quot;">​</a></h2><h3 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;dependencies&quot;">​</a></h3><p>运行依赖，也叫生产依赖。声明项目在生产环境中所必须的依赖包，使用 <code>npm install xxx</code> 或则 <code>npm install xxx --save</code> 时，会被自动插入到该字段中。</p><p>dependencies里的第三方包是我们的项目正常运行必须的包，因此npm会去检查并确保这些第三方包必须存在。</p><p><strong>注意</strong>：不要将测试或过渡性的依赖放在dependencies中</p><p><strong>依赖的版本号</strong></p><p>（1）一般情况下，使用符合 semver 规范的版本号</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0 - 2.9999.9999</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt;=1.0.2 &lt;2.1.2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">baz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt;1.0.2 &lt;=2.3.4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">boo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2.0.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">qux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">asd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://asdf.com/asdf.tar.gz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">til</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">~1.2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">elf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">~1.2.3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">two</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2.x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">thr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3.3.x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>（2）<strong>URL 代替版本范围</strong></p><p>tarball URL是一种可以替代依赖版本范围的安装方式，它是一个指向NPM包安装文件的URL地址，npm install 时会根据地址下载相应的 npm 包，并直接使用该版本进行安装。</p><p>通常被用于以下情况：</p><ul><li>当某个NPM包的版本号没有遵循语义化版本控制（SemVer）规则时，无法使用正常的版本号进行安装时。</li><li>当需要使用已经发布过的某个特定版本的NPM包时，但该版本已经被从NPM仓库删除了，或者出现其他问题导致无法正常安装时。</li><li>当需要对某个私有模块进行安装时，而该模块未被上传到NPM仓库中。</li></ul><p>格式如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">https://registry.npmjs.org/&lt;package-name&gt;/-/&lt;package-name&gt;-&lt;version&gt;.tgz</span></span></code></pre></div><p><code>&lt;package-name&gt;</code>表示要安装的NPM包名称，<code>&lt;version&gt;</code>表示要安装的NPM包版本。</p><p>例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz</span></span></code></pre></div><p>（3）<strong>Git URL 作为依赖项</strong></p><p>格式：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&lt;protocol&gt;://[&lt;user&gt;[:&lt;password&gt;]@]&lt;hostname&gt;[:&lt;port&gt;][:][/]&lt;path&gt;[#&lt;commit-ish&gt; | #semver:&lt;semver&gt;]</span></span></code></pre></div><ul><li><code>&lt;protocol&gt;</code> ：git 仓库使用的传输协议，可以是：<code>git</code>, <code>git+ssh</code>, <code>git+http</code>, <code>git+https</code>, <code>git+file</code></li><li><code>&lt;user&gt;[:&lt;password&gt;]</code>：可选项，用于指定连接到Git仓库所需的用户名和密码</li><li><code>&lt;hostname&gt;</code>：Git服务器的主机名或IP地址</li><li><code>&lt;port&gt;</code>：可选项，Git服务器的端口号，默认为80（http）或443（https）</li><li><code>[/]&lt;path&gt;</code>：Git仓库的路径，如果是根路径，则可以省略斜杠。例如，<code>github.com/user/repo</code></li><li><code>[#&lt;commit-ish&gt; | #semver:&lt;semver&gt;]</code>：可选项，用于指定要安装的代码版本。其中，<code>#&lt;commit-ish&gt;</code>表示Git提交号或分支名，<code>#semver:&lt;semver&gt;</code>表示符合语义化版本控制规范的版本号。</li></ul><p>例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git+ssh://git@github.com:npm/cli.git#v1.0.27</span></span>
<span class="line"><span style="color:#babed8;">git+ssh://git@github.com:npm/cli#semver:^5.0</span></span>
<span class="line"><span style="color:#babed8;">git+https://isaacs@github.com/npm/cli.git</span></span>
<span class="line"><span style="color:#babed8;">git://github.com/npm/cli.git#v1.0.27</span></span></code></pre></div><p>（4）<strong>GitHub 网址（1.1.65+）</strong></p><p>不同于使用Git URL或Tarball URL，而是直接使用GitHub项目的URL地址</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">&lt;name&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">github:&lt;username&gt;/&lt;repository&gt;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>&lt;name&gt;</code>是依赖包的名称，可以自定义；<code>&lt;username&gt;</code>和<code>&lt;repository&gt;</code>则是对应的GitHub用户名和仓库名</p><p>注意：使用 github 地址时有一些限制，比如：不能使用特定版本号、不能锁定依赖项版本、不能自动处理依赖关系等。因此，如果需要更精细的控制依赖项的版本和关系，建议还是使用其他方式，如Git URL或Tarball URL</p><p>（5）<strong>本地路径（2.0.0+）</strong></p><p>一般用在本地离线开发和测试，在不想访问外部服务器的地方安装npm。</p><p>可以使用<code>npm instal -S</code>方式安装本地依赖包，路径可以是以下几种：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">../foo/bar</span></span>
<span class="line"><span style="color:#babed8;">~/foo/bar</span></span>
<span class="line"><span style="color:#babed8;">./foo/bar</span></span>
<span class="line"><span style="color:#babed8;">/foo/bar</span></span></code></pre></div><p>然后它们将被规范化为一个相对路径并添加到package.json中</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">file:../foo/bar</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><br><h3 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;devDependencies&quot;">​</a></h3><p>开发依赖，项目在开发环境需要的而运行时不需要的依赖，用于辅助开发，通常包括项目工程化工具，如webpack、eslint、babel等。</p><p>它们只需安装在开发设备上，而无需在生产环境中运行代码。当打包上线时并不需要这些包，所以可以把这些依赖添加到 devDependencies 中，这些依赖依然会在本地指定 npm install 时被安装和管理，但是不会被安装到生产环境中。</p><br><h3 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">​</a></h3><p>可以翻译作：对等依赖、前置依赖、同伴依赖，一种特殊的依赖，不会被自动安装，通常用于表示与另一个包的依赖与兼容性关系来警示使用者，用来指定本包所需要的主工具的版本。</p><p>比如使用 element-plus 时，必须保证已经安装 vue3 才能正常使用，因为它是依赖 vue3 的，如果尝试直接安装它，它会发出警告，只有安装了 vue3 后，它才能正常运行。</p><p>不同的包管理器对 peerDependencies 的处理逻辑有所不同：</p><ul><li>npm： <ul><li>v 1~2，自动安装</li><li>v 3~6，不会自动安装，并且如果发现依赖项的无效版本，则会发出警告</li><li>v 7+，默认自动安装</li></ul></li><li>yarn：自动安装，如果 peerDependencies指定的依赖未安装，会视为错误，并抛出错误信息</li><li>pnpm：自动安装，如果 peerDependencies指定的依赖未安装，会输出警告</li></ul><br><h3 id="optionaldependencies" tabindex="-1">optionalDependencies <a class="header-anchor" href="#optionaldependencies" aria-label="Permalink to &quot;optionalDependencies&quot;">​</a></h3><p>可选依赖，表示依赖是可选的，它不会阻塞主功能的使用，安装或者引入失败也无妨。这类依赖如果安装失败，那么 npm 的整个安装过程也是成功的。</p><p>optionalDependencies 对象中的包会覆盖 dependencies 中同名的包，所以只需在一个地方进行设置即可。</p><p>比如我们使用 colors 这个包来对 console.log 打印的信息进行着色来增强和区分提示，但它并不是必需的，所以可以将其加入到 optionalDependencies，并且在运行时处理引入失败的逻辑。比如像这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">fooVersion</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo/package.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">version</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#BABED8;"> (er) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#82AAFF;">notGoodFooVersion</span><span style="color:#BABED8;">(fooVersion)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// .. then later in your program ..</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (foo) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doFooThings</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><br><h3 id="peerdependenciesmeta" tabindex="-1">peerDependenciesMeta <a class="header-anchor" href="#peerdependenciesmeta" aria-label="Permalink to &quot;peerDependenciesMeta&quot;">​</a></h3><p>可以将 peerDependencies 指定为可选的。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">peerDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">colors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^1.4.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">peerDependenciesMeta</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">colors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">optional</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><br><h3 id="bundledependencies-⬇️" tabindex="-1">bundleDependencies ⬇️ <a class="header-anchor" href="#bundledependencies-⬇️" aria-label="Permalink to &quot;bundleDependencies ⬇️&quot;">​</a></h3><p>打包依赖。它的值是一个数组，在发布包时，bundleDependencies 里面的依赖都会被一起打包。</p><p>比如：指定 react 和 react-dom 为打包依赖：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bundleDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><p>在执行 <code>npm pack</code> 打包生成 tgz 压缩包中，将出现 node_modules 并包含 react 和 react-dom。</p><blockquote><p>注意：这个字段中的值必须是在dependencies、devDependencies里声明过的包才行。</p></blockquote><p>普通依赖通常从 npm registry 安装，但当你想用一个不在 npm registry 里的包，或者一个被修改过的第三方包时，打包依赖会比普通依赖更好用。</p><br><h3 id="overrides" tabindex="-1">overrides <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;overrides&quot;">​</a></h3><p>可以重写项目中的<strong>任意深度的依赖</strong>的版本号，进行包的替换。</p><p>比如某个依赖 A，由于一些原因它依赖的包 foo@1.0.0 需要替换，我们可以使用 overrides 修改 foo 的版本号：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">overrides</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.1.0-patch</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>当然这样会更改整个依赖树里的 foo，我们可以只对 A 下的 foo 进行版本号重写：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">overrides</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.1.0-patch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>overrides 支持任意深度的嵌套。</p><h2 id="文件和目录" tabindex="-1">文件和目录 <a class="header-anchor" href="#文件和目录" aria-label="Permalink to &quot;文件和目录&quot;">​</a></h2><p>包含项目所包含的文件，以及入口等信息。</p><p>当一个项目同时定义了main、browser、module，像webpack、rollup等构建工具会感知这些字段，并根据环境以及不同的模块规范来进行不同的入口文件查找。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;main&quot;: &quot;./index.ts&quot;, </span></span>
<span class="line"><span style="color:#babed8;">&quot;browser&quot;: &quot;./browser/index.ts&quot;,</span></span>
<span class="line"><span style="color:#babed8;">&quot;module&quot;: &quot;./index.mjs&quot;</span></span></code></pre></div><p>比如 webpack 构建项目时默认的 target 为 <code>&#39;web&#39;</code>，也就是 Web 构建。它的 resolve.mainFeilds 字段默认为 <code>[&#39;browser&#39;, &#39;module&#39;, &#39;main&#39;]</code>，就会按照 browser -&gt; module -&gt; main 的顺序来查找入口文件</p><br><h3 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h3><p>一个包含项目中的文件的数组，指定哪些文件需要跟随一起发布（npm pulish），用来控制 npm 包的大小。</p><p>默认情况下，发布包时只包含：package.json、license、readme，和 main 字段里指定的文件。在此基础上，可以通过 files 字段指定更多需要一起发布的内容</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: [</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">filename.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 单独的文件</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">directory/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">   </span><span style="color:#676E95;font-style:italic;">// 整个文件夹</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">glob/*.{js,json}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// glob 匹配的文件</span></span>
<span class="line"><span style="color:#BABED8;"> ]</span></span></code></pre></div><p>一般情况下，files 里会指定构建出来的产物以及类型文件，而 src，test 等目录下的文件不需要跟随发布。</p><br><h3 id="type❓⬇️" tabindex="-1">type❓⬇️ <a class="header-anchor" href="#type❓⬇️" aria-label="Permalink to &quot;type❓⬇️&quot;">​</a></h3><p><em>在官方文档上未找到相关内容</em></p><p>早期 esm 出现之前，大部分模块都是以 commonjs 规范来实现的，nodejs默认会按照该规范来解析模块。而在 es6 提出 esm 规范后，为了兼容不同地模块规范，避免构建时模块系统的冲突，提供了该选项来指示解析模块的方式。</p><p>用于定义 package.json 文件和该文件所在项目的根目录中，对<code>.js</code>文件和无扩展名文件的处理方式。可选值：</p><ul><li>module：js 被当作 ES 模块处理，文件书写必须是 <code>export default {}</code>这种格式</li><li>commonjs：默认值，当作 CommonJS 模块处理，书写格式必须是 <code>module.exports={}</code>这种格式</li></ul><p>除了上面的方式，还可以通过文件扩展名来指示模块解析方式。ES 模块采用<code>.mjs</code> 扩展名，Commonjs 模块采用<code>.cjs</code>扩展名，nodejs 会自动按照相应的格式处理。</p><p>无论该字段为何值，<code>.mjs</code> 的文件都按照es模块来处理，<code>.cjs</code> 的文件都按照 CommonJS 模块来处理。</p><br><h3 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h3><blockquote><p>cjs 格式的入口文件</p></blockquote><p>一个相对于根目录的文件路径，指向模块的入口文件，在browser和node环境中都可以使用。如果未设置，那么入口文件默认为根目录下的<code>index.ts</code>。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.ts</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>像上面这样，当引入对应的 packageA 时，实际上引入的就是 <code>node_modules/packageA/index.ts</code>。</p><p>这是早期只有 CommonJS 模块规范时，指定项目入口的唯一属性。</p><br><h3 id="browser" tabindex="-1">browser <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;browser&quot;">​</a></h3><blockquote><p>浏览器端使用，配置成 umd 格式，webpack&lt;5 会优先使用 browser</p></blockquote><p>main 字段里指定的入口文件在 browser 和 Node 环境中都可以使用。如果只想在 web 端使用，并且不允许在 server 端使用，可以使用 browser 来定义入口文件。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">browser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/index.ts</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><br><h3 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h3><blockquote><p>esm 格式的入口文件</p></blockquote><p>用于指定 ES 模块的入口文件，只要支持ES6，会优先使用module入口。这样代码也可以启用tree shaking机制。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/index.mjs</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>需要注意，.js 文件是使用 commonJS 规范的语法 (require(&#39;xxx&#39;))，.mjs 是用 ESM 规范的语法 (import &#39;xxx&#39;)。</p><p>上面三个的入口文件相关的配置是有差别的，特别是在不同的使用场景下。在 Web 环境中，如果使用 loader 加载 ESM（ES module），那么这三个配置的加载顺序是 browser→module→main，如果使用 require 加载 CommonJS 模块，则加载的顺序为 main→module→browser。</p><p>Webpack 在进行项目构建时，有一个 target 选项，默认为 Web，即构建 Web 应用。如果需要编译一些同构项目，如 node 项目，则只需将 webpack.config.js 的 target 选项设置为 node 进行构建即可。如果在 Node 环境中加载 CommonJS 模块，或者 ESM，则只有 main 字段有效。</p><br><h3 id="exports" tabindex="-1">exports <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;exports&quot;">​</a></h3><p><em>npm 6.9 +，对应 nodejs 12 +</em></p><blockquote><p>注意：只能在支持 ESM 的 nodejs 版本中使用，并且工作方式与 CommonJS 不同，不能混用，即无法从使用CommonJS的模块中导入ESM导出的内容，反之亦然。</p></blockquote><p>示例：<a href="https://github.com/vuejs/vitepress/blob/main/package.json" target="_blank" rel="noreferrer">vitepress</a></p><p>用于指定模块（或库）的导入和导出规则，该字段提供了一种新的方式来定义JavaScript模块的行为，并使代码在不同环境下的使用更加灵活。</p><p>exports字段可以包含以下属性：</p><ul><li><code>require</code>：用于指定当用户使用<code>require()</code>导入模块时，将导入哪个文件或路径。</li><li><code>import</code>：用于指定当用户使用 ES6 import 语句导入模块时，将导入哪个文件或路径。</li><li><code>node</code>：用于指定在Node.js环境下，模块的导入/导出行为。它是require和import的组合，可根据环境自动选择适当的导入方式。</li><li><code>default</code>：用于指定默认导出内容的路径或文件。</li><li>其他自定义属性：开发者可以根据需要自定义其他属性，以满足特定的需求</li></ul><p>示例：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-library</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">./lib/math</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/math.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">./lib/formulae</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/formulae.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">utils</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/utils.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./esm/utils.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./lib/main.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个示例中，exports 字段有4个属性。其中，<code>./lib/math</code> 和 <code>./lib/formulae</code> 分别指向一个CommonJS模块，而utils 则使用了require和import两种不同的导入方式。default属性则指定了默认导出的内容路径。</p><p>还可以配置子包路径</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">./style</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./dist/css/index.css&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">// 引入时可以写为</span></span>
<span class="line"><span style="color:#C3E88D;">import </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">packageA/style</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">// 不用写成</span></span>
<span class="line"><span style="color:#C3E88D;">import </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">packageA/dist/css/index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">;</span></span></code></pre></div><p>这在第三方 UI 库需要引入对应的样式文件时比较常见</p><p>这让 npm包有了条件导出的功能，可以配置不同环境对应的模块入口文件，并且当它存在时，它的优先级最高。</p><br><h3 id="workspaces" tabindex="-1">workspaces <a class="header-anchor" href="#workspaces" aria-label="Permalink to &quot;workspaces&quot;">​</a></h3><p>一个文件模式数组，描述了本地文件系统中的位置，告诉 npm 可以通过查找这些位置来找到项目中需要的 npm 包，并把它们链接到 node_modules 中。</p><p>该字段的值可以是文件夹名称或通配符</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspace-a</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><p>该配置常见于 monorepo 类型的项目中，通常子项目中会平铺在 packages 目录下，所以通常配置为：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><p>参考链接 - <a href="https://github.com/element-plus/element-plus/blob/dev/package.json" target="_blank" rel="noreferrer">element-plus - package.json</a> | <a href="https://github.com/vuejs/vue-cli/blob/dev/package.json" target="_blank" rel="noreferrer">vue-cli package.json</a></p><br><h3 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">​</a></h3><p>用来指定各个内部命令对应的可执行文件的位置，在各种脚手架项目中比较常见。</p><p>很多包（比如脚手架）都有一个或多个可执行的文件希望被放到PATH中。实际上，就是这个功能让npm可执行的，npm会将它链接到 prefix/bin（全局初始化）或者 ./node_modules/.bin/（本地初始化）</p><p>如果只有一个可执行文件，并且名字和包名一样，可以只用一个字符串，比如：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-program</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.2.5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./path/to/program</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>相当于</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-program</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.2.5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">my-program</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./path/to/program</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>参考链接 - <a href="https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli/package.json" target="_blank" rel="noreferrer">vue-cli/@vue/cli - package.json</a></p><br><h3 id="man-⬇️" tabindex="-1">man ⬇️ <a class="header-anchor" href="#man-⬇️" aria-label="Permalink to &quot;man ⬇️&quot;">​</a></h3><p>man 命令是 Linux 中的帮助指令，通过该指令可以查看 Linux 中的指令帮助、配置文件帮助和编程帮助等信息。当用户在终端中执行<code>man &lt;module&gt;</code>命令时，Node.js会查找指定模块的man文件，并将其显示在终端中。</p><blockquote><p><strong>注意</strong>：</p><ul><li>man属性仅适用于全局安装的模块，对于本地安装的模块，通常无效。</li><li>man属性只在类Unix系统中有效，在Windows系统中可能无法正常工作。</li></ul></blockquote><p>man属性可以包含以下类型的值：</p><ol><li>字符串：表示单个man文件的路径。当值为字符串时，Node.js假定该路径是相对于模块根目录的。</li><li>数组：表示多个man文件的路径。当值为数组时，每个元素都应该是一个字符串，表示单个man文件的路径。</li><li>对象：表示自定义的man文件配置对象。该对象应该包含以下属性： <ul><li>path：必需，表示man文件的路径。与字符串和数组类型的值不同，path属性应该是绝对路径。</li><li>section：可选，表示man文件的编号。默认值为1</li></ul></li></ol><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My awesome module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">man</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./docs/man/1/my-module.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/usr/local/share/man/man1/my-module.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">section</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">7</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">other-module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^2.0.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个示例中，man属性是一个数组，其中包含两个元素。第一个元素是一个字符串，表示相对于模块根目录下的man文件路径。第二个元素是一个对象，指定了man文件的绝对路径和编号。同时，该示例还定义了其他模块依赖项，例如other-module。</p><br><h3 id="directories-⬇️" tabindex="-1">directories ⬇️ <a class="header-anchor" href="#directories-⬇️" aria-label="Permalink to &quot;directories ⬇️&quot;">​</a></h3><blockquote><p>注意：这个配置很少使用。在npm v7中，directories属性已被弃用，使用workspace来代替</p></blockquote><p>一个对象，用于定义模块中的不同目录路径。它可以包含以下属性：</p><ol><li><code>bin</code>：用于指定可执行文件放置的目录，默认值是<code>./bin</code>。</li><li><code>doc</code>：用于指定模块文档的目录，默认值是<code>./doc</code>或<code>./docs</code>。</li><li><code>example</code>：用于指定示例代码的目录，默认值是<code>./example</code>、<code>./examples</code>或<code>./demo</code>。</li><li><code>lib</code>：用于指定库代码的目录，默认值是<code>./lib</code>。</li><li><code>man</code>：用于指定man手册文件的目录，默认值是<code>./man</code>。</li><li><code>test</code>：用于指定测试代码的目录，默认值是<code>./test</code>或<code>./tests</code>。</li></ol><p>示例：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">My module description</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">directories</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">lib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tests</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">other-module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^2.0.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在这个示例中，directories属性指定了lib目录和test目录的路径，分别为src和tests。这意味着该模块的库代码将存储在src目录中，而测试代码将存储在tests目录中。</p><p>在实际的项目目录中，可能没有按照这个规范进行命名，那么就可以在directories字段指定每个目录对应的文件路径。</p><h2 id="发布配置" tabindex="-1">发布配置 <a class="header-anchor" href="#发布配置" aria-label="Permalink to &quot;发布配置&quot;">​</a></h2><p>主要是和项目发布相关的配置</p><br><h3 id="private" tabindex="-1">private <a class="header-anchor" href="#private" aria-label="Permalink to &quot;private&quot;">​</a></h3><p>当值为 true 时，npm会拒绝发布当前项目。</p><p>防止意外的把私有库发布到 npm 服务器。如果你要确定给定的包是只发布在特定registry（如内部registry）的，用publishConfighash 的描述来重写 registry 的 publish-time 配置参数。</p><br><h3 id="publishconfig" tabindex="-1">publishConfig <a class="header-anchor" href="#publishconfig" aria-label="Permalink to &quot;publishConfig&quot;">​</a></h3><p>用于设置发布时一些配置项的集合，在发布模块时生效。</p><p>如果不想模块被默认标记为最新，或者不想发布到公共仓库，可以在这里配置 tag 或仓库地址。更详细的配置可以参考 <a href="https://docs.npmjs.com/cli/v9/using-npm/config" target="_blank" rel="noreferrer">npm-config</a></p><p>通常情况下，publishConfig 会配合 private 来使用，如果只想让模块发布到特定 npm 仓库，就可以这样来配置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">private</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">true</span><span style="color:#BABED8;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">publishConfig</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">tag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 指定当前版本对应的标签</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">registry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://registry.npmjs.org/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 发布的npm私源地址</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">access</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">public</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 发布有作用的包，如@leon/ping-url，必须设置access</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">publicPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 配置注册表的公共路径，默认公共路径是/package</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>比如在安装依赖时指定了 registry 为 taobao 镜像源，但发布时希望在公网发布，就可以指定 publishConfig.registry</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">publishConfig</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">registry</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://registry.npmjs.org/</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><br><h3 id="preferglobal-🚫" tabindex="-1">preferGlobal 🚫 <a class="header-anchor" href="#preferglobal-🚫" aria-label="Permalink to &quot;preferGlobal 🚫&quot;">​</a></h3><blockquote><p>注意：npm v5版本后就已经被废弃</p></blockquote><p>用于指示模块是否应该全局安装。如果 preferGlobal 为 true，则意味着该模块应该被视为工具或命令行程序，并建议在全局范围内安装。</p><br><h3 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-label="Permalink to &quot;license&quot;">​</a></h3><p>指定软件的开源协议类型，开源协议表述了其他人获得代码后拥有的权利，可以对代码进行何种操作，何种操作又是被禁止的。常见的协议如下：</p><ul><li>MIT ：只要用户在项目副本中包含了版权声明和许可声明，他们就可以拿你的代码做任何想做的事情，你也无需承担任何责任。</li><li>Apache ：类似于 MIT ，同时还包含了贡献者向用户提供专利授权相关的条款。</li><li>GPL ：修改项目代码的用户再次分发源码或二进制代码时，必须公布他的相关修改。</li></ul><p>最简单的配置方法是，指定一个许可证的名字：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">{ &quot;license&quot; : &quot;MIT&quot; }</span></span></code></pre></div><p>如果你有更复杂的许可条件，或者想要提供给更多地细节，可以这样：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">licenses</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> : </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyLicense</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://github.com/owner/project/path/to/license</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><h2 id="系统配置" tabindex="-1">系统配置 <a class="header-anchor" href="#系统配置" aria-label="Permalink to &quot;系统配置&quot;">​</a></h2><p>和项目关联的系统配置，比如 node 版本或操作系统兼容性之类。这些要求只会起到提示警告的作用，即使用户的环境不符合要求，也不影响安装依赖包。</p><br><h3 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;engines&quot;">​</a></h3><p>一个对象，用于指定模块所需的 Node.js 版本范围，npm 会检查其运行环境是否符合要求，不符合时，会抛出错误并拒绝安装或使用模块。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">engines</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt;=14 &lt;16</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">pnpm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt;7</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>注意：除非设置 engine-strict 标记，否则 engines 字段只是建议值</p></blockquote><br><h3 id="enginestrict" tabindex="-1">engineStrict <a class="header-anchor" href="#enginestrict" aria-label="Permalink to &quot;engineStrict&quot;">​</a></h3><p>通常与 engines 配置一起使用，用于指定是否允许安装 Node.js 版本不符合 package.json 文件中指定版本范围的依赖项。默认情况下，<code>engineStrict</code> 的值为 <code>false</code>，即不启用严格模式。</p><p>启用了严格模式时，当遇到 Node.js 版本不符合要求的依赖项时，npm 会拒绝安装并报错。</p><br><h3 id="packagemanager" tabindex="-1">packageManager <a class="header-anchor" href="#packagemanager" aria-label="Permalink to &quot;packageManager&quot;">​</a></h3><p>v 7.7+，对应 nodejs v 15+</p><p>用于指定项目使用的包管理器，例如 <code>npm</code> 、 <code>yarn</code>、<code>pnpm</code>。如果该配置项未设置，则默认使用 <code>npm</code></p><br><h3 id="os-⬇️" tabindex="-1">os ⬇️ <a class="header-anchor" href="#os-⬇️" aria-label="Permalink to &quot;os ⬇️&quot;">​</a></h3><p>指定项目对操作系统的兼容性要求。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">os</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">darwin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">linux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><br><h3 id="cpu-⬇️" tabindex="-1">cpu ⬇️ <a class="header-anchor" href="#cpu-⬇️" aria-label="Permalink to &quot;cpu ⬇️&quot;">​</a></h3><p>指定项目只能在特定的 CPU 体系上运行</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cpu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x64</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ia32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 黑名单形式，在名字前加上“!”表示取反</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cpu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> : </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!arm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!mips</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">]</span></span></code></pre></div><h2 id="第三方配置" tabindex="-1">第三方配置 <a class="header-anchor" href="#第三方配置" aria-label="Permalink to &quot;第三方配置&quot;">​</a></h2><p>package.json 文件还可以承载一些第三方库特有的配置，例如 Babel、ESLint 等。它们每个都有特有的配置项，即可以放在单独的配置文件中，也可以写在 package.json 中。</p><p>参见 <a href="./../../guide/some-questions#配置文件是如何被插件获取并加载的">配置文件是如何被插件获取并加载的</a></p><br><h3 id="types-和-typeings" tabindex="-1">types 和 typeings <a class="header-anchor" href="#types-和-typeings" aria-label="Permalink to &quot;types 和 typeings&quot;">​</a></h3><p>项目如果是用<code>TypeScript</code>写的，则需要<code>types</code>字段，对外暴露相关的类型定义，指定TypeScript的类型定义的入口文件</p><blockquote><p><code>types</code> 是在 TypeScript 2.0 及更高版本中引入的， <code>typings</code> 是它的早期版本。</p></blockquote><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.d.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">,</span></span></code></pre></div><br><h3 id="unpkg" tabindex="-1">unpkg <a class="header-anchor" href="#unpkg" aria-label="Permalink to &quot;unpkg&quot;">​</a></h3><p>Unpkg 是一个开源的 CDN（内容分发网络），用于分发 npm 包和其他前端资源。它提供了一个简单可靠的方式来获取和加载 npm 包，无需自己安装和管理依赖项。你可以在 HTML 页面中引入任何 npm 包或 JavaScript 文件，并直接从 unpkg 的服务器上下载和加载所需的资源</p><p>比如 vue package.json 的 unpkg 定义为 <code>dist/vue.global.js</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">unpkg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/vue.global.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">,</span></span></code></pre></div><p>当我们想通过 CDN 的方式使用链接引入 vue 时。</p><p>访问 <code>https://unpkg.com/vue</code> 会重定向到 <code>https://unpkg.com/vue@3.2.37/dist/vue.global.js</code>，其中 3.2.27 是 Vue 的最新版本。</p><br><h3 id="jsdelivr" tabindex="-1">jsdelivr <a class="header-anchor" href="#jsdelivr" aria-label="Permalink to &quot;jsdelivr&quot;">​</a></h3><p>与 unpkg 类似，vue 通过如下的配置</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;jsdelivr&quot;: &quot;dist/vue.global.js&quot;,</span></span></code></pre></div><p>访问 <code>https://cdn.jsdelivr.net/npm/vue</code> 实际上获取到的是 jsdelivr 字段里配置的文件地址。</p><br><h3 id="borwserslist" tabindex="-1">borwserslist <a class="header-anchor" href="#borwserslist" aria-label="Permalink to &quot;borwserslist&quot;">​</a></h3><p>设置项目的浏览器兼容情况，用来告知支持哪些浏览器及版本。</p><p>Babel、Autoprefixer 和其他工具会用到它，以将所需的 polyfill 和 fallback 添加到目标浏览器。比如：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">browserslist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">production</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt;0.2%</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">not dead</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">not op_mini all</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">development</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">last 1 chrome version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">last 1 firefox version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">last 1 safari version</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这里指定了一个对象，里面定义了生产环境和开发环境的浏览器要求。上面的 development 就是指定开发环境中支持最后一个版本的 chrome、Firefox、safari 浏览器。</p><p>也可以使用 <code>.browserslistrc</code> 单文件配置，参见：<a href="./../browserslist">browserslist</a></p><br><h3 id="sideeffects" tabindex="-1">sideEffects <a class="header-anchor" href="#sideeffects" aria-label="Permalink to &quot;sideEffects&quot;">​</a></h3><p>显式设置某些模块是否具有副作用，用于 tree-shaking 优化。</p><p>比如在项目中整体引入 Ant Design 组件库的 css 文件：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">import &#39;antd/dist/antd.css&#39;; </span><span style="color:#676E95;font-style:italic;">// or &#39;antd/dist/antd.less&#39;</span></span></code></pre></div><p>如果 Ant Design 的 package.json 里不设置 sideEffects，那么 webapck 构建打包时会认为这段代码只是引入了但并没有使用，可以 tree-shaking 剔除掉，最终导致产物缺少样式。</p><p>所以 Ant Design 在 package.json 里设置了如下的 sideEffects，来告知 webpack，这些文件具有副作用，引入后不能被删除。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sideEffects</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.css</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><p>参考：(ant-design - package.json)[<a href="https://github.com/ant-design/ant-design/blob/master/package.json" target="_blank" rel="noreferrer">https://github.com/ant-design/ant-design/blob/master/package.json</a>]</p><br><h3 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h3><p>lint-staged 是一个对 Git 暂存区文件进行操作的工具，比如可以在代码提交前执行 lint 校验，类型检查，图片优化等操作。通常配合 husky 这样的 git-hooks 工具一起使用。</p><p>git-hooks 用来定义一个钩子，这些钩子方法会在 git 工作流程中比如 pre-commit，commit-msg 时触发，可以把 lint-staged 放到这些钩子方法中。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">*.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">git add -A</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用 lint-staged 时，每次提交代码只会检查当前改动的文件。</p><br><h3 id="githooks" tabindex="-1">gitHooks <a class="header-anchor" href="#githooks" aria-label="Permalink to &quot;gitHooks&quot;">​</a></h3><p>gitHooks 用来定义一个钩子，在git commit之前执行 ESlint 检查。在执行 lint 命令后，会自动修复暂存区的文件。修复之后的文件并不会存储在暂存区，所以需要用 git add 命令将修复后的文件重新加入暂存区。在执行 pre-commit 命令之后，如果没有错误，就会执行 git commit 命令：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gitHooks</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">pre-commit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这里就是配合上面的 lint-staged 来进行代码的检查操作</p><br><h3 id="web-types" tabindex="-1">web-types <a class="header-anchor" href="#web-types" aria-label="Permalink to &quot;web-types&quot;">​</a></h3><p><a href="https://blog.jetbrains.com/webstorm/2021/01/web-types/" target="_blank" rel="noreferrer">Web-types – Filling a Vue Libraries Documentation Gap</a></p><p>在使用 webstrom 编写页面时，为了提供更好的代码提示，比如使用 element-plus 时，当键入 el 时，就会出现 element-plus 相关组件的提示，并且当键入属性、slot、方法的首字母时，也会弹出相应的提示。这样避免了在 ide 和 ui文档之间来回切换，开发体验很棒。</p><p>于是就有了web-types.json这个东西，只要在package.json配置了<code>&quot;web-types&quot;: &quot;web-types.json&quot;</code>，WebStorm就会去相应目录寻找这个文件并进行解析，在编辑器中提供相应的提示。</p><br><h3 id="vetur" tabindex="-1">vetur <a class="header-anchor" href="#vetur" aria-label="Permalink to &quot;vetur&quot;">​</a></h3><p><a href="https://juejin.cn/post/7239282783293243453?searchId=2023100801225004D0F6EA6DD18CC74246" target="_blank" rel="noreferrer">相关阅读</a></p><p>同理，vetur 也是用来实现相同的效果，不过它是针对 vetur 插件的，需要配置 attribute.json、tags.json</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vetur</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">tags</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tags.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">attributes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">attributes.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span></span></code></pre></div>`,344),t=[e];function c(r,D,i,y,F,u){return a(),n("div",null,t)}const B=s(l,[["render",c]]);export{q as __pageData,B as default};
