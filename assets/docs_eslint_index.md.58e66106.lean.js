import{_ as s,v as l,b as e,R as n}from"./chunks/framework.8277b2e6.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/eslint/index.md","filePath":"docs/eslint/index.md","lastUpdated":1710299060000}'),a={name:"docs/eslint/index.md"},o=n(`<h1>ESLint 概述</h1><p>v8.45.0</p><p><a href="https://zh-hans.eslint.org/" target="_blank" rel="noreferrer">官网</a> | <a href="https://github.com/eslint/eslint" target="_blank" rel="noreferrer">github</a></p><blockquote><p>lint 工具最早可追溯到1979年，它的作用是用于扫描C源文件并对程序中不可移植的代码发出警告。因为在C语言发展初期，由于程序员的风格问题，导致在移植代码时会出现一些不严谨的代码片段导致无法被编译器执行的问题。1979年贝尔实验室开发了一个静态代码分析的工具，并将其命名为lint，所以后续的类似的代码检测工具都延续该命名风格，比如ESLint、JSLint等。</p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>ESLint 最初是由<a href="https://github.com/nzakas" target="_blank" rel="noreferrer">Nicholas C. Zakas</a>（红宝书作者、ESLint 创始人） 于2013年6月创建的开源项目，目标是提供一个插件化的 javascript 代码静态检查分析工具，帮助开发人员在编写代码时遵循一致的规范和最佳实践</p><p>代码检查是一种静态的分析，一般用于寻找有问题的模式或代码，并且不依赖于具体的编码风格，对大多数编程语言来说都会有代码检查，一般编译程序会内置检查工具。但js是动态弱类型语言，开发中如果不加约束很容易出错，ESLint 就是为了让开发过程中就能发现错误而非在执行过程中。</p><p>ESLint保持其插件的特性，让开发人员自定义属于自己的规则，也可以遵循一些大的社区或团队的规范直接继承下来，所有规则都是可插入的，同时为了方便使用也内置了一些规则。</p><p><strong>特点</strong></p><ol><li>默认使用 Espree 对 js 进行解析</li><li>本身只能对 js 代码和符合 es 正式规范（至少 stage 4 阶段）的代码进行检查</li><li>不支持最新的语法和实验性的语法，可以使用 <code>@babel/eslint-parser</code>、<code>@babel/eslint-plugin</code></li><li>原生支持jsx，但不等于支持 react 的特定语法，还需要 <code>eslint-plugin-react</code></li><li>eslint 的相关插件的命名格式为：<code>eslint-plugin-xxx</code></li></ol><p><a href="https://zh-hans.eslint.org/docs/latest/use/getting-started" target="_blank" rel="noreferrer">安装与使用</a></p><h2 id="原理简述" tabindex="-1">原理简述 <a class="header-anchor" href="#原理简述" aria-label="Permalink to &quot;原理简述&quot;">​</a></h2><p>整体过程分为：</p><ol><li>使用<strong>解析器</strong>将源码转为 AST，严格说是 ESTree</li><li>获取所有插件或用户定义的规则，遍历 AST 并执行规则</li><li>在遍历完成后，将收集到的错误抛出，及自动 fix</li></ol><p>在它的底层，还是对 AST 的操作，就是对代码的词法分析和语法分析</p><p>解析器是 eslint 工作的核心，只有先把源码解析为 AST，更严谨的说应该是 ESTree，然后在此基础上，才能进行后续处理。阅读 <a href="./parser">parser</a> 的内容，然后会对解析器有个更完整的理解。</p><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><p>通过<code>eslint --init</code>，可以启动 eslint 的配置初始化向导，按照提示可以快速创建配置文件。</p><p>eslint 在 v8.35.0 之前，使用的是 eslintrc 配置系统，在之后，推荐使用 flat config 配置系统。关于这 eslint 的新配置系统，可能查看官方 blog。</p><p>在 eslintrc 配置系统中支持以下类型的配置文件，优先级由上到下：</p><ol><li><code>.eslintrc.js</code></li><li><code>.eslintrc.cjs</code></li><li><code>.eslintrc.yaml</code></li><li><code>.eslintrc.yml</code></li><li><code>.eslintrc.json</code></li><li><code>package.json</code></li></ol><p>eslint 还支持内联配置，例如：<code>/*eslint-disable*/</code>和 <code>/*eslint-enable*/ \`\`/*global*/ /*eslint*/ /*eslint-env*/ </code>，这种是与源码写在一起的，优先级最高。</p><p>在 flat config 配置系统中，只支持<code>eslint.config.js</code>配置文件</p><h2 id="预定义配置" tabindex="-1">预定义配置 <a class="header-anchor" href="#预定义配置" aria-label="Permalink to &quot;预定义配置&quot;">​</a></h2><p>ESLint 有两个针对 JavaScript 的预定义配置：</p><ul><li><code>js.configs.recommended</code> - 启用 ESLint 推荐的规则，以避免潜在错误</li><li><code>js.configs.all</code> - 启用所有 ESLint 提供的规则</li></ul><p>要使用这些预定义配置，要先安装 <strong><code>@eslint/js</code></strong> 包，然后在配置对象的其他属性中加入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> js </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@eslint/js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js.configs.recommended</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">            </span><span style="color:#F07178;">semi</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">warn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,28),t=[o];function p(i,c,r,d,D,y){return l(),e("div",null,t)}const u=s(a,[["render",p]]);export{F as __pageData,u as default};
