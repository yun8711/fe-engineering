import{_ as e,v as a,b as n,R as i}from"./chunks/framework.8277b2e6.js";const u=JSON.parse('{"title":"Nginx 介绍","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"full-stack/nginx/index.md","filePath":"full-stack/nginx/index.md","lastUpdated":1710309574000}'),r={name:"full-stack/nginx/index.md"},p=i('<h1 id="nginx-介绍" tabindex="-1">Nginx 介绍 <a class="header-anchor" href="#nginx-介绍" aria-label="Permalink to &quot;Nginx 介绍&quot;">​</a></h1><ul><li><a href="https://nginx.org/" target="_blank" rel="noreferrer">官网</a></li><li><a href="https://tengine.taobao.org/book/chapter_02.html?eqid=fb38a23b000a898800000002646c7aa4" target="_blank" rel="noreferrer">nginx 平台初探</a></li><li><a href="https://blog.csdn.net/WuDan_1112/article/details/126147231" target="_blank" rel="noreferrer">Nginx惊群问题分析及解决</a></li></ul><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Nginx是一款开源的高性能HTTP服务器和反向代理服务器，也可以作为一个IMAP/POP3/SMTP代理服务器。Nginx是为了解决C10K问题而设计的，即同时处理上万个并发连接。这是网络IO多路复用的经典问题，Nginx使用了异步非阻塞的事件驱动模型来处理这个问题</p><blockquote><p>c 即 client，而10k 则是一万的意思。c10k就是单机同时并发一万个请求，同理c100k则是同时并发十万个请求</p><p>每个线程占用一定的内存，Linux默认一个线程8M，Windows默认一个线程1M。按传统阻塞式IO模式进行处理，一个线程处理一个连接，具体能处理多大的并发量就要看服务器的硬件设备。但是如果使用并发框架，或者go的协程，很容易做到万及以上的并发。 而他们的核心思想就是IO多路复用。</p></blockquote><p>与其他同类型工具相比，明显的优点是<strong>占用内存少，并发能力强</strong></p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><p>高并发：得益于 nginx 在 linux 环境下使用的 opoII IO 多路复用模型，单机支持10万以上的并发连接，极限能做到百万（取决与内存大小）</p><p>低内存消耗：一般1万个非活跃的 HTTP Keep-Alive 连接在 Nginx 中仅消耗2.5MB内存，比 Apach 占用的内存资源更少</p><p>高拓展性：低耦合的模块设计，极具扩展性，由多个不同功能、不同层次、不同类型的模块组成，并且有丰富的第三方模块支持</p><p>高可靠性：很多高流量网站都在核心服务器上大规模使用 Nginx，经过十几年各种复杂场景和各大公司的生产环境验证，并且 nginx 架构由 mastre 进程和 worker 进程组成，master 进程可以在 worker 进程出现问题时快速开启一个新的 workder 进程。</p><p>更快：单次请求响应更快，高并发可以更快的处理响应</p><p>热部署：master 管理进程与 worker 工作进程的分离设计，使得 Nginx 能够支持热部署</p><p>开源协议：使用 BSD 许可协议，免费使用，且可修改源码</p><h2 id="发展历程" tabindex="-1">发展历程 <a class="header-anchor" href="#发展历程" aria-label="Permalink to &quot;发展历程&quot;">​</a></h2><p>Nginx是由俄罗斯的程序员Igor Sysoev所开发，其首个公开版本0.1.0发布于2004年10月4日。</p><p>主要发展历程：</p><p>2004年：Igor Sysoev开始开发Nginx，目标是创建一个为C10K问题设计的高性能HTTP服务器</p><p>2005年：Nginx开始在俄罗斯的大型网站和网络服务中得到广泛应用</p><p>2006年：Nginx的使用开始扩展到全球，包括一些知名的科技公司和网站</p><p>2009年：Nginx 0.8.0发布，这是第一个主要的稳定版本，引入了许多新的特性</p><p>2011年：Nginx 1.0.0发布，标志着Nginx进入了成熟的阶段</p><p>2012年：Nginx开始提供商业支持，并成立了Nginx公司</p><p>2014年：Nginx发布了其商业产品Nginx Plus，提供了更多的特性和服务</p><p>2019年：Nginx被F5 Networks公司收购，但仍然保持开源，并继续开发和维护</p><p>至今：Nginx已经成为全球最流行的Web服务器之一，被许多大型网站和服务广泛使用。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>1、HTTP 服务器</p><p>Nginx 本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用 Nginx 来做服务器，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署。</p><p>2、静态资源服务（FTP）</p><p>静态服务器，通常会提供一个上传的功能，其他应用如果需要静态资源就从该静态服务器中获取。</p><p>3、反向代理服务</p><p>反向代理 (Reverse Proxy) 是指以代理服务器来接受 Internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>4、负载均衡</p><p>就是分摊到多个操作单元上进行执行，例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>5、动静分离</p><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路</p>',37),t=[p];function o(l,s,x,g,h,d){return a(),n("div",null,t)}const N=e(r,[["render",o]]);export{u as __pageData,N as default};
