import{_ as e,v as o,b as a,R as r}from"./chunks/framework.8277b2e6.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/pnpm/npmrc.md","filePath":"docs/pnpm/npmrc.md","lastUpdated":1709747010000}'),c={name:"docs/pnpm/npmrc.md"},p=r(`<h1>.npmrc 配置</h1><p>v8.14.0（2024-02）</p><p><a href="https://pnpm.io/zh/npmrc" target="_blank" rel="noreferrer">pnpm - npmrc</a> | <a href="https://docs.npmjs.com/cli/v9/using-npm/config" target="_blank" rel="noreferrer">npm - npmrc</a></p><br><p>虽然 <code>.npmrc </code> 是 npm 的配置文件，但 pnpm 兼容 npm 的绝大多数功能，也会从<code>.npmrc</code> 文件中读取参数，所以它对 pnpm 也有影响。</p><br><p>下面所列配置并不包含全部配置项，只列出使用较多、比较关键的项目，完整配置查看文档</p><h2 id="依赖提升设置" tabindex="-1">依赖提升设置 <a class="header-anchor" href="#依赖提升设置" aria-label="Permalink to &quot;依赖提升设置&quot;">​</a></h2><h3 id="hoist" tabindex="-1">hoist <a class="header-anchor" href="#hoist" aria-label="Permalink to &quot;hoist&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code></p><p>当 hoist 为 <code>true</code> 时，所有依赖项都会被提升到 <code>node_modules/.pnpm/node_modules</code>。 这使得 <code>node_modules</code>所有包都可以访问 未列出的依赖项。</p><br><h3 id="hoist-workspace-packages-v8-14-0" tabindex="-1">hoist-workspace-packages（v8.14.0） <a class="header-anchor" href="#hoist-workspace-packages-v8-14-0" aria-label="Permalink to &quot;hoist-workspace-packages（v8.14.0）&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code> ，是否提升 workspace 中的依赖</p><p>当为 true 时，工作空间中的包被符号链接到<code>&lt;workspace_root&gt;/node_modules/.pnpm/node_modules</code>或<code>&lt;workspace_root&gt;/node_modules</code>，取决于其他提升设置 <code>hoist-pattern</code> 和 <code>public-hoist-pattern</code> 。</p><p>也就是说，在 pnpm 管理的 monorepo 项目中，默认情况下每个 workspace 下的依赖，都会全部被提升到项目根目录下。</p><br><h3 id="hoist-pattern" tabindex="-1">hoist-pattern <a class="header-anchor" href="#hoist-pattern" aria-label="Permalink to &quot;hoist-pattern&quot;">​</a></h3><p>默认值： <code>[&#39;*&#39;]</code>，类型： <code>string[]</code></p><p>指定哪些包应该被提升到 <code>node_modules/.pnpm/node_modules</code></p><blockquote><p>node_modules 下的 <code>.pnpm</code>是 pnpm 的内部数据目录，对外不可见，也就不能在项目中引用这里的包。</p></blockquote><p>默认情况下，所有包都被提升，但是，如果您知道只有某些有缺陷的包具有幻影依赖，您可以使用此选项专门提升幻影依赖（推荐做法）。</p><p><em>示例</em></p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">hoist-pattern[]=*eslint*</span></span>
<span class="line"><span style="color:#BABED8;">hoist-pattern[]=*babel*</span></span>
<span class="line"><span style="color:#BABED8;">hoist-pattern[]=*types*</span></span>
<span class="line"><span style="color:#BABED8;">hoist-pattern[]=!@types/react</span></span></code></pre></div><br><h3 id="public-hoist-pattern" tabindex="-1">public-hoist-pattern <a class="header-anchor" href="#public-hoist-pattern" aria-label="Permalink to &quot;public-hoist-pattern&quot;">​</a></h3><p>默认值： <code>[&#39;*eslint*&#39;,&#39;*prettier*&#39;]</code>，类型： <code>string[]</code></p><p>指定哪些包应该被提升到 <code>node_modules/</code>目录下，也就是提升到了项目中 node_modules 的根目录下，它们可以在项目中正常导入</p><p><em>示例</em></p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">public-hoist-pattern[]=*plugin*</span></span>
<span class="line"><span style="color:#BABED8;">public-hoist-pattern[]=*types*</span></span>
<span class="line"><span style="color:#BABED8;">public-hoist-pattern[]=!@types/react</span></span></code></pre></div><p><strong>注意</strong>：如果 <code>shamefully-hoist=true</code> ，就相当于设置 <code>public-hoist-pattern=*</code></p><br><h3 id="shamefully-hoist" tabindex="-1">shamefully-hoist <a class="header-anchor" href="#shamefully-hoist" aria-label="Permalink to &quot;shamefully-hoist&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code></p><p>控制是否将所有的依赖都提升到项目的 <code>node_modules</code> 目录下</p><p>默认情况下，pnpm 创建一个半严格的 <code>node_modules</code>，只有 <code>node_modules</code>中的依赖项可以访问未声明的依赖项，但 <code>node_modules</code> 之外的模块不行，比如不允许直接在项目中访问未在 package.json 中声明的依赖。这种结构下，大多数的包都可以正常工作。 但是，如果某些工具仅在提升的依赖项位于根目录的 <code>node_modules</code> 时才有效，您可以将其设置为 <code>true</code> 来为您提升它们。</p><p><strong>注意</strong>：pnpm 并不推荐这么做，像 npm 一样，扁平化的目录结构会造成一些问题。</p><h2 id="node-模块设置" tabindex="-1">Node 模块设置 <a class="header-anchor" href="#node-模块设置" aria-label="Permalink to &quot;Node 模块设置&quot;">​</a></h2><h3 id="modules-cache-max-age" tabindex="-1">modules-cache-max-age <a class="header-anchor" href="#modules-cache-max-age" aria-label="Permalink to &quot;modules-cache-max-age&quot;">​</a></h3><p>默认值： <code>10080</code>（以分钟为单位，7 天），类型： <code>number</code></p><p>孤立包应该从模块目录中被删除的时间（以分钟为单位）。 pnpm 在模块目录中保存了一个包的缓存。 切换分支或降级依赖项时，这会提高安装速度。</p><h2 id="锁文件设置" tabindex="-1">锁文件设置 <a class="header-anchor" href="#锁文件设置" aria-label="Permalink to &quot;锁文件设置&quot;">​</a></h2><h3 id="lockfile" tabindex="-1">lockfile <a class="header-anchor" href="#lockfile" aria-label="Permalink to &quot;lockfile&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code></p><p>是否读取或生成<code>pnpm-lock.yaml</code>文件</p><br><h3 id="lockfile-frozen-lockfile" tabindex="-1">lockfile-frozen-lockfile <a class="header-anchor" href="#lockfile-frozen-lockfile" aria-label="Permalink to &quot;lockfile-frozen-lockfile&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code></p><p>当设置为 <code>true</code> 并且存在 <code>pnpm-lock.yaml</code> 并满足 <code>package.json</code> 中的依赖关系时，执行无头安装。 无头安装会跳过所有依赖项解析，因为它不需要修改lockfile。</p><br><h3 id="git-branch-lockfile" tabindex="-1">git-branch-lockfile <a class="header-anchor" href="#git-branch-lockfile" aria-label="Permalink to &quot;git-branch-lockfile&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code></p><p>作用是在使用 git 切换分支时，自动更新或恢复对应分支的 pnpm-lock.yaml 文件。这样可以确保每个分支的依赖项版本都是一致的，避免因为依赖项版本不一致导致的问题。</p><p>开启该配置后，使用 git checkout 切换分支时，git-branch-lockfile 会自动执行以下操作：</p><ul><li>在当前分支，如果 pnpm-lock.yaml 文件有修改，它会自动提交这些修改。</li><li>切换到新的分支后，如果新分支的 pnpm-lock.yaml 文件与当前的文件不一致，它会自动执行 pnpm install 来更新依赖项。</li></ul><p>这样，每个分支都会有自己独立的 pnpm-lock.yaml 文件，确保了依赖项版本的一致性。</p><br><h3 id="merge-git-branch-lockfiles-branch-pattern" tabindex="-1">merge-git-branch-lockfiles-branch-pattern <a class="header-anchor" href="#merge-git-branch-lockfiles-branch-pattern" aria-label="Permalink to &quot;merge-git-branch-lockfiles-branch-pattern&quot;">​</a></h3><p>默认值： <code>null</code>，类型： <code>Array</code>或<code>null</code></p><p>当 <code>git-branch-lockfile=true</code>时，会在每个分支创建一个锁文件，当需要把多个锁文件合并时，可以通过该配置自动完成，</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C3E88D;">merge-git-branch-lockfiles-branch-pattern[]=main</span></span>
<span class="line"><span style="color:#C3E88D;">merge-git-branch-lockfiles-branch-pattern[]=release*</span></span></code></pre></div><p>上面配置的意思是，当分支名为 main 或者 release 开头时，会自动合并各个分支的锁文件。</p><p>一般情况下，都是通过 <code>--merge-git-branch-lockfiles</code> 参数手动完成</p><h2 id="注册源-身份验证设置" tabindex="-1">注册源&amp;身份验证设置 <a class="header-anchor" href="#注册源-身份验证设置" aria-label="Permalink to &quot;注册源&amp;身份验证设置&quot;">​</a></h2><h3 id="registry" tabindex="-1">registry <a class="header-anchor" href="#registry" aria-label="Permalink to &quot;registry&quot;">​</a></h3><p>默认值： <code>https://registry.npmjs.org/</code>，类型： <code>url</code></p><p>指定 npm 包注册源的基础 url，需要包括末尾的斜杠。使用 <strong><code>&lt;scope&gt;:registry</code></strong> 格式，可以指定作用域包的基础 url，比如：<code>@babel:registry=https://example.com/packages/npm/</code>，</p><h2 id="peerdependency-设置" tabindex="-1">PeerDependency 设置 <a class="header-anchor" href="#peerdependency-设置" aria-label="Permalink to &quot;PeerDependency 设置&quot;">​</a></h2><h3 id="auto-install-peers" tabindex="-1">auto-install-peers <a class="header-anchor" href="#auto-install-peers" aria-label="Permalink to &quot;auto-install-peers&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code></p><p>是否自动安装缺少的非可选 PeerDependency</p><p><strong>版本冲突</strong></p><p>如果不同包所依赖的 <code>peerDependencies</code> 存在版本冲突，pnpm 不会自动安装任何版本，而是打印一个警告。例如，如果一个依赖项需要 <code>react@^16.0.0</code>，而另一个依赖项需要 <code>react@^17.0.0</code>，pnpm 不会自动安装。</p><p><strong>解决冲突</strong></p><p>如果出现版本冲突，需要评估自己要安装哪个版本，或者更新依赖以调整它们的 <code>peerDependencies</code></p><br><h3 id="strict-peer-dependencies" tabindex="-1">strict-peer-dependencies <a class="header-anchor" href="#strict-peer-dependencies" aria-label="Permalink to &quot;strict-peer-dependencies&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code></p><p>如果启用了此选项，那么在依赖树中存在缺失或无效的 peer 依赖关系时，命令将执行失败</p><br><h3 id="resolve-peers-from-workspace-root" tabindex="-1">resolve-peers-from-workspace-root <a class="header-anchor" href="#resolve-peers-from-workspace-root" aria-label="Permalink to &quot;resolve-peers-from-workspace-root&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code></p><p>启用后，将会使用根工作区项目的 dependencies 解析其他工作区项目的 peer dependencies 。 这是一个有用的功能，因为你可以只在工作区的根目录中安装 peer dependencies，并且确保工作区中的所有项目都使用相同版本的 peer dependencies</p><h2 id="命令行设置" tabindex="-1">命令行设置 <a class="header-anchor" href="#命令行设置" aria-label="Permalink to &quot;命令行设置&quot;">​</a></h2><h3 id="no-color" tabindex="-1">[no-]color <a class="header-anchor" href="#no-color" aria-label="Permalink to &quot;[no-]color&quot;">​</a></h3><p>默认值： <code>auto</code>，类型： <code>auto,always,never</code></p><p>设置控制台输出的颜色</p><ul><li><strong>auto</strong>：当标准输出是终端或 TTY 时，输出会带有颜色</li><li><strong>always</strong>：忽略终端和 pipe 之间的区别。 一般不需要这个选项；在大多数情况下，如果您想在重定向的输出中使用颜色代码，您可以将 <code>--color</code> 标志传递给 pnpm 命令以强制它输出颜色</li><li><strong>never</strong>：关闭颜色，作用与 <code>--no-color</code> 相同</li></ul><br><h3 id="recursive-install" tabindex="-1">recursive-install <a class="header-anchor" href="#recursive-install" aria-label="Permalink to &quot;recursive-install&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code></p><p>是否在所有工作区或子包上执行安装操作，如果为 true，执行 <code>pnpm install</code> 时的行为将变为 <code>pnpm install -r</code></p><br><h3 id="engine-strict" tabindex="-1">engine-strict <a class="header-anchor" href="#engine-strict" aria-label="Permalink to &quot;engine-strict&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code></p><p>用于控制 pnpm 是否应严格遵守 package.json 的 engines 字段指定的版本要求</p><p>设置为 true 时，如果当前环境的 node.js 版本、包管理器版本不符合 engines 字段的要求，会停止执行命令，比如<code>install</code>或者 <code>add &lt;pkg&gt;</code>。</p><p>设置为 false 时，pnpm 会显示一个警告，但是仍然会继续执行</p><br><h3 id="npm-path" tabindex="-1">npm-path <a class="header-anchor" href="#npm-path" aria-label="Permalink to &quot;npm-path&quot;">​</a></h3><p>类型：<code>path</code></p><p>Pnpm 用于某些操作（例如发布）的 npm 的二进制文件的位置。</p><h2 id="构建设置" tabindex="-1">构建设置 <a class="header-anchor" href="#构建设置" aria-label="Permalink to &quot;构建设置&quot;">​</a></h2><h3 id="ignore-scripts" tabindex="-1">ignore-scripts <a class="header-anchor" href="#ignore-scripts" aria-label="Permalink to &quot;ignore-scripts&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code>，是否忽略 <code>package.json </code>及其依赖中定义的 scripts 脚本</p><p>也就不会执行这些脚本，一般会在 CI/CD 场景下通过命令行指定</p><p><strong>注意</strong>：不会阻止 <code>pnpmfile.cjs</code> 的执行</p><br><h3 id="ignore-dep-scripts" tabindex="-1">ignore-dep-scripts <a class="header-anchor" href="#ignore-dep-scripts" aria-label="Permalink to &quot;ignore-dep-scripts&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code></p><p>不执行已安装的包中定义的任何 scripts 脚本，只执行当前项目的 scipts</p><h2 id="node-js-设置" tabindex="-1">Node.js 设置 <a class="header-anchor" href="#node-js-设置" aria-label="Permalink to &quot;Node.js 设置&quot;">​</a></h2><h3 id="use-node-version" tabindex="-1">use-node-version <a class="header-anchor" href="#use-node-version" aria-label="Permalink to &quot;use-node-version&quot;">​</a></h3><p>默认值： <code>undefined</code>，类型： <code>semver</code></p><p>指定项目运行时的确切 Node.js 版本。 pnpm 将自动安装指定版本的 Node.js 并将其用于执行 <code>pnpm run</code> 命令或 <code>pnpm node</code> 命令</p><p>可以代替 <code>.nvmrc</code> 和 <code>nvm</code></p><br><h3 id="node-version" tabindex="-1">node-version <a class="header-anchor" href="#node-version" aria-label="Permalink to &quot;node-version&quot;">​</a></h3><p>默认值： <code>node -v</code>的返回值，不还 v 前缀，类型： <code>semver</code></p><p>检查 package 的 <code>engines</code> 设置的 Node.js 版本，并阻止在项目中安装与指定的 nodejs 版本不兼容的依赖。</p><p>例如有如下配置：</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">node-version</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">12.22.0</span></span>
<span class="line"><span style="color:#F07178;">engine-strict</span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;">true</span></span></code></pre></div><p>这样，就无法安装不支持 Node.js v12.22.0 的新依赖项</p><br><h3 id="node-mirror-releasedir" tabindex="-1"><code>node-mirror:&lt;releaseDir&gt;</code> <a class="header-anchor" href="#node-mirror-releasedir" aria-label="Permalink to &quot;\`node-mirror:&lt;releaseDir&gt;\`&quot;">​</a></h3><p>默认值： <code>https://nodejs.org/download/&lt;releaseDir&gt;/</code>，类型： <code>url</code></p><p>设置用于下载 Node.js 的基本 URL，示例如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">node-mirror:release=https://npmmirror.com/mirrors/node/</span></span>
<span class="line"><span style="color:#babed8;">node-mirror:rc=https://npmmirror.com/mirrors/node-rc/</span></span>
<span class="line"><span style="color:#babed8;">node-mirror:nightly=https://npmmirror.com/mirrors/node-nightly/</span></span></code></pre></div><h2 id="工作空间设置" tabindex="-1">工作空间设置 <a class="header-anchor" href="#工作空间设置" aria-label="Permalink to &quot;工作空间设置&quot;">​</a></h2><p>与 monorepo 工作空间相关的设置</p><h3 id="link-workspace-packages" tabindex="-1">link-workspace-packages <a class="header-anchor" href="#link-workspace-packages" aria-label="Permalink to &quot;link-workspace-packages&quot;">​</a></h3><p>默认值： <code>true</code>，类型：<code>true,false,deep</code></p><p>是否允许创建工作空间符号链接</p><p>当设置为 true 时，它会在同一工作空间的包之间创建符号链接。这意味着如果你在同一工作空间中有多个包，并且它们互相依赖，那么 pnpm 将会创建符号链接，使得这些包可以直接引用彼此的源代码，而不是从 node_modules 中引用已发布的版本。 这对于在开发过程中需要在多个包之间进行快速迭代和测试的场景非常有用。</p><p>例如，如果你正在开发一个库，并且同时也在开发使用该库的应用，那么你可能希望在库的代码发生变化时，应用能够立即看到这些变化，而不需要先发布库，然后再在应用中更新依赖</p><p>这个配置项就是在 monorepo 项目中，可以使用<code>workspace:*</code>的形式引用子包</p><br><h3 id="prefer-workspace-packages" tabindex="-1">prefer-workspace-packages <a class="header-anchor" href="#prefer-workspace-packages" aria-label="Permalink to &quot;prefer-workspace-packages&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code>，用于控制 pnpm 在安装依赖时的行为。</p><p>设置为 true 时，如果工作空间中的其他包已经安装了一个依赖包的版本，那么 pnpm 会优先使用这个已安装的版本，而不是去下载一个新的版本。这可以帮助保持工作空间中的包使用相同版本的依赖，从而避免版本冲突。</p><p>如果为 false，那么 pnpm 在安装依赖时将不会考虑工作空间中的其他包已经安装了哪些版本，而是根据 package.json 中的版本范围去下载最新的符合条件的版本。</p><br><h3 id="shared-workspace-lockfile" tabindex="-1">shared-workspace-lockfile <a class="header-anchor" href="#shared-workspace-lockfile" aria-label="Permalink to &quot;shared-workspace-lockfile&quot;">​</a></h3><p>默认值： <code>true</code>，类型： <code>boolean</code>，控制在 monorepo 项目中是否共享 pnpm-lock.yaml 文件</p><p>设置为 true 时，pnpm 会在工作空间的根目录下创建一个共享的 pnpm-lock.yaml 文件，所有的子包都会使用这个共享的锁定文件。这意味着所有的包都会使用相同版本的依赖，这有助于保持整个工作空间的依赖版本一致。</p><p>如果为 false，那么 pnpm 将会为每个子包创建一个独立的 pnpm-lock.yaml 文件。这意味着每个包可以有自己的依赖版本，这可能会导致工作空间中的包使用不同版本的依赖。</p><p><strong>注意</strong>：尽管所有依赖项都硬链接到根目录node_modules中，但子包中也只能访问在其包中声明的依赖项。因此pnpm的严格性得以保留。这是前面提到的符号链接的结果。</p><br><h3 id="save-workspace-protocol" tabindex="-1">save-workspace-protocol <a class="header-anchor" href="#save-workspace-protocol" aria-label="Permalink to &quot;save-workspace-protocol&quot;">​</a></h3><p>默认值： <code>rolling</code>，类型： <code>true,false,rolling</code>，控制在 monorepo 项目中如何保存子包之间的依赖关系</p><p>不同取值对应的 spec 创建方式如下：</p><table><thead><tr><th>save-workspace-protocol</th><th>save-prefix</th><th>spec</th></tr></thead><tbody><tr><td>false</td><td><code>&#39;&#39;</code></td><td><code>1.0.0</code></td></tr><tr><td>false</td><td><code>&#39;~&#39;</code></td><td><code>~1.0.0</code></td></tr><tr><td>false</td><td><code>&#39;^&#39;</code></td><td><code>^1.0.0</code></td></tr><tr><td>true</td><td><code>&#39;&#39;</code></td><td><code>workspace:1.0.0</code></td></tr><tr><td>true</td><td><code>&#39;~&#39;</code></td><td><code>workspace:~1.0.0</code></td></tr><tr><td>true</td><td><code>&#39;^&#39;</code></td><td><code>workspace:^1.0.0</code></td></tr><tr><td>rolling</td><td><code>&#39;&#39;</code></td><td><code>workspace:*</code></td></tr><tr><td>rolling</td><td><code>&#39;~&#39;</code></td><td><code>workspace:~</code></td></tr><tr><td>rolling</td><td><code>&#39;^&#39;</code></td><td><code>workspace:^</code></td></tr></tbody></table><br><h3 id="include-workspace-root" tabindex="-1">include-workspace-root <a class="header-anchor" href="#include-workspace-root" aria-label="Permalink to &quot;include-workspace-root&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code>，是否在安装工作空间的依赖时包含工作空间的根目录。</p><p>在工作区中递归执行命令时，也在根工作区项目上执行它们。</p><p>设置为 true 时，pnpm 在安装工作空间包的依赖时，会同时安装工作空间根目录下的 package.json 文件中声明的依赖。这意味着如果你在工作空间的根目录下声明了一些依赖，那么这些依赖也会被安装到每个工作空间包的 node_modules 目录中。</p><br><h3 id="ignore-workspace-cycles-v8-1-0" tabindex="-1">ignore-workspace-cycles（v8.1.0） <a class="header-anchor" href="#ignore-workspace-cycles-v8-1-0" aria-label="Permalink to &quot;ignore-workspace-cycles（v8.1.0）&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code>，是否忽略工作空间中的循环依赖</p><p>在 monorepo 项目中，可能会出现包 A 依赖包 B，包 B 又依赖包 A 的情况，形成了一个循环依赖。默认情况下，pnpm 会检测到这种循环依赖，并抛出一个错误。</p><p>如果设置为 true，pnpm 会忽略这种循环依赖，不抛出错误，可能对于某些特殊的项目结构有用，但是应该避免这种情况</p><br><h3 id="disallow-workspace-cycles-v8-9-0" tabindex="-1">disallow-workspace-cycles（v8.9.0） <a class="header-anchor" href="#disallow-workspace-cycles-v8-9-0" aria-label="Permalink to &quot;disallow-workspace-cycles（v8.9.0）&quot;">​</a></h3><p>默认值： <code>false</code>，类型： <code>boolean</code>，是否禁止工作空间中的循环依赖</p><p>如果设置为 true，pnpm 会禁止循环依赖，抛出错误，并停止安装过程</p>`,166),s=[p];function t(n,d,l,i,h,m){return o(),a("div",null,s)}const k=e(c,[["render",t]]);export{b as __pageData,k as default};
