import{_ as o,v as a,b as s,R as p}from"./chunks/framework.8277b2e6.js";const n="/fe-engineering/assets/compodoc.1f2d64c4.png",D=JSON.parse('{"title":"集成 compodoc","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"nest/advanced/compodoc.md","filePath":"nest/advanced/compodoc.md","lastUpdated":1710305030000}'),e={name:"nest/advanced/compodoc.md"},l=p(`<h1 id="集成-compodoc" tabindex="-1">集成 compodoc <a class="header-anchor" href="#集成-compodoc" aria-label="Permalink to &quot;集成 compodoc&quot;">​</a></h1><p>Nest 项目中有很多模块，模块之间相互依赖，模块内有 controller、service 等，当项目复杂之后，模块之间的关系错综复杂。</p><p>这时候我们可以用 <a href="https://www.npmjs.com/package/@compodoc/compodoc" target="_blank" rel="noreferrer">compodoc</a> 生成一份文档，把依赖关系可视化</p><p>官网：<a href="https://compodoc.app/" target="_blank" rel="noreferrer">https://compodoc.app/</a></p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Compodoc是一个文档工具，专门为Angular应用程序和TypeScript项目生成文档。它会生成一个静态网站，其中包含你的应用程序的所有信息，包括模块、组件、指令、服务等的详细信息。</p><p>它的主要特性包括：</p><ul><li>支持TypeScript和Javascript的API文档生成</li><li>支持Markdown文件</li><li>提供搜索功能</li><li>提供图形化的依赖图</li><li>支持主题切换</li><li>支持国际化</li></ul><p>因为 nest 项目结构与 angular 类似，所以也支持了 nest</p><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>安装依赖</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@compodoc/compodoc</span></span></code></pre></div><br><h3 id="生成文档" tabindex="-1">生成文档 <a class="header-anchor" href="#生成文档" aria-label="Permalink to &quot;生成文档&quot;">​</a></h3><p>运行如下命令</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@compodoc/compodoc</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">tsconfig.json</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-o</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">dlx</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">@compodoc/compodoc</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">tsconfig.json</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-o</span></span></code></pre></div><p>这将会在项目根目录下生成一个名为documentation的目录，其中包含你的项目文档的静态网站。你可以通过在浏览器中打开documentation/index.html来查看你的项目文档。</p><p><img src="`+n+'" alt="nest_compodoc"></p>',19),c=[l];function t(r,i,d,m,h,y){return a(),s("div",null,c)}const E=o(e,[["render",t]]);export{D as __pageData,E as default};
