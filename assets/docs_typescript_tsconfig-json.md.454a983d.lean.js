import{_ as s,v as e,b as a,R as o}from"./chunks/framework.8277b2e6.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/typescript/tsconfig-json.md","filePath":"docs/typescript/tsconfig-json.md","lastUpdated":1697046453000}'),t={name:"docs/typescript/tsconfig-json.md"},n=o(`<h1>tsconfig.json</h1><p>v5.2（2023.08.26）</p><p><a href="https://www.typescriptlang.org/zh/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">官网</a> | <a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">中文网</a> | <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noreferrer">配置项列表</a> | <a href="https://github.com/tsconfig/bases/" target="_blank" rel="noreferrer">官方推荐配置</a> | <a href="http://json.schemastore.org/tsconfig" target="_blank" rel="noreferrer">json scheme</a></p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>如果一个目录下存在一个<code>tsconfig.json</code>文件，那么它意味着这个目录是TypeScript项目的根目录。 <code>tsconfig.json</code>文件中指定了用来编译这个项目的根文件和编译选项</p><p>官方推出了一些基本配置示例 <a href="https://github.com/tsconfig/bases/" target="_blank" rel="noreferrer">github.com/tsconfig/bases</a> ，可以通过扩展这些已经处理过不同的 JavaScript 运行时环境的 <code>tsconfig.json</code> 文件来简化你项目中的 <code>tsconfig.json</code>。</p><p>如果你的项目是基于 Node.js 12.x 写的，那么你可以使用 npm 模块：<a href="https://www.npmjs.com/package/@tsconfig/node12" target="_blank" rel="noreferrer"><code>@tsconfig/node12</code></a>：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@tsconfig/node12/tsconfig.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">preserveConstEnums</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.spec.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h2><p>一个字符串，其中包含要继承的另一个配置文件的路径，路径可以使用Node.js风格的解析。</p><p>首先加载被继承的配置，然后当前配置会覆盖继承的配置。</p><p>除 references 外均可以被继承，但是不允许配置文件之间的循环。</p><h2 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h2><h3 id="projects-项目配置" tabindex="-1">Projects - 项目配置 <a class="header-anchor" href="#projects-项目配置" aria-label="Permalink to &quot;Projects - 项目配置&quot;">​</a></h3><h3 id="language-and-environment-语言和环境" tabindex="-1">Language and Environment - 语言和环境 <a class="header-anchor" href="#language-and-environment-语言和环境" aria-label="Permalink to &quot;Language and Environment - 语言和环境&quot;">​</a></h3><h4 id="target-编译目标" tabindex="-1">target - 编译目标 <a class="header-anchor" href="#target-编译目标" aria-label="Permalink to &quot;target - 编译目标&quot;">​</a></h4><p>设置编译后要兼容的 JavaScript 版本，可选值包括 es3、es5、es6/es2015、es2016~es2022、esnext（表示当前 TypeScript 支持的最高版本）等。</p><p>现代浏览器支持全部 ES6 的功能，如果没有特殊需要，推荐设置为 <code>&quot;es2018&quot;</code>，一个对常用语法支持较为全面的版本</p><p>target 配置会影响 js 特性是否被降级，例如，如果 <code>target</code> 是 ES5 或更低版本，箭头函数 <code>() =&gt; this</code> 会被转换为等价的 <code>函数</code> 表达式。</p><p>如果只使用 Nodejs，应该基于 node 版本设置 target，可以通过 <a href="https://node.green/" target="_blank" rel="noreferrer">node.green</a> 的支持数据库查询相应的版本，推荐：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">支持的编译目标</th></tr></thead><tbody><tr><td style="text-align:left;">Node 8</td><td style="text-align:left;"><code>ES2017</code></td></tr><tr><td style="text-align:left;">Node 10</td><td style="text-align:left;"><code>ES2018</code></td></tr><tr><td style="text-align:left;">Node 12</td><td style="text-align:left;"><code>ES2019</code></td></tr></tbody></table><p>target 的配置会改变 lib 选项的默认值</p><h3 id="modules-模块" tabindex="-1">Modules - 模块 <a class="header-anchor" href="#modules-模块" aria-label="Permalink to &quot;Modules - 模块&quot;">​</a></h3><h4 id="module-模块标准" tabindex="-1">module - 模块标准 <a class="header-anchor" href="#module-模块标准" aria-label="Permalink to &quot;module - 模块标准&quot;">​</a></h4><p><em>参考 <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="noreferrer">模块</a></em></p><p>指定构建产物使用的模块标准，可选值有：none、commonjs、amd、umd、system、es6/es2015、es2020、es2022、esnext、node16、nodenext</p><p>target 为 es3/es5 时，默认值为 commonjs，</p><p>TypeScript 会随着版本更新新增可用的 module 选项，如：</p><ul><li>在 4.5 版本新增了 <code>es2022</code> 配置，支持了 Top-Level Await 语法。</li><li>在 4.7 版本新增了 <code>node16</code> 和 <code>nodenext</code> 两个 module 配置，使用这两个配置意味着你构建的 npm 包或者代码仅在 node 环境下运行，因此 TypeScript 会对应地启用对 Node ESM 的支持</li></ul><p>相关配置项：moduleResolution、esModuleInterop、allowImportingTsExter、allowArbitraryExtensi、resolveJsonModule</p><h4 id="moduleresolution-模块解析" tabindex="-1">moduleResolution - 模块解析 <a class="header-anchor" href="#moduleresolution-模块解析" aria-label="Permalink to &quot;moduleResolution - 模块解析&quot;">​</a></h4><p><em>参考 <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">模块解析</a></em></p><p>指定 TypeScript 模块解析策略：</p><ul><li>在 ts 1.6 之前，使用 classic</li><li>如果 module 为 amd、umd、system、es6/es2015，默认为 classic</li><li>一般情况下，使用 node</li></ul><h3 id="javascript-support-js支持" tabindex="-1">JavaScript Support - js支持 <a class="header-anchor" href="#javascript-support-js支持" aria-label="Permalink to &quot;JavaScript Support - js支持&quot;">​</a></h3><h3 id="emit" tabindex="-1">Emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;Emit&quot;">​</a></h3><h4 id="outdir-输出目录" tabindex="-1">outDir - 输出目录 <a class="header-anchor" href="#outdir-输出目录" aria-label="Permalink to &quot;outDir - 输出目录&quot;">​</a></h4><p>构建产物的输出目录，会按照原来的目录结构输出。</p><p>如果没有指定，则编译后的 js 文件与 ts 文件在相同目录中；如果指定了，则编译后的 js（以及 <code>.d.ts</code>, <code>.js.map</code> 等）将会被生成到这个目录下，源文件的目录将会被保留。</p><h3 id="interop-constraints-互操作约束" tabindex="-1">Interop Constraints 互操作约束 <a class="header-anchor" href="#interop-constraints-互操作约束" aria-label="Permalink to &quot;Interop Constraints 互操作约束&quot;">​</a></h3><h4 id="allowsyntheticdefaultimports-允许合成默认导入" tabindex="-1">allowSyntheticDefaultImports - 允许合成默认导入 <a class="header-anchor" href="#allowsyntheticdefaultimports-允许合成默认导入" aria-label="Permalink to &quot;allowSyntheticDefaultImports - 允许合成默认导入&quot;">​</a></h4><p>当设置为 true， 并且模块<strong>没有</strong>显式指定默认导出时</p><p>如果不为 true：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 这是一个文件 utilFunctions.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> getStringLength </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">str</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  getStringLength</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>当上面的文件被导入时，</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> utils </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./utilFunctions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getStringLength</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Check JS</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>编辑器会报错：<code>Module &#39;&quot;/home/runner/work/TypeScript-Website/TypeScript-Website/utilFunctions&quot;&#39; has no default export.</code>，因为没有“default”对象可以导入</p><p>本选项不会影响 TypeScript 生成的 JavaScript，它仅对类型检查起作用</p><h4 id="esmoduleinterop-es-模块互操作性" tabindex="-1">esModuleInterop - es 模块互操作性 <a class="header-anchor" href="#esmoduleinterop-es-模块互操作性" aria-label="Permalink to &quot;esModuleInterop - es 模块互操作性&quot;">​</a></h4><p>默认情况下（未设置 <code>esModuleInterop</code> 或值为 false），TypeScript 像 ES6 模块一样对待 CommonJS/AMD/UMD。</p><p><strong>一般设置为 true</strong>，同时会启用 allowSyntheticDefaultImports</p><h4 id="forceconsistentcasinginfilenames-文件系统大小写" tabindex="-1">forceConsistentCasingInFileNames - 文件系统大小写 <a class="header-anchor" href="#forceconsistentcasinginfilenames-文件系统大小写" aria-label="Permalink to &quot;forceConsistentCasingInFileNames - 文件系统大小写&quot;">​</a></h4><p>是否区分文件系统大小写规则，默认 false，即不区分大小写</p><h3 id="type-checking-类型检查" tabindex="-1">Type Checking 类型检查 <a class="header-anchor" href="#type-checking-类型检查" aria-label="Permalink to &quot;Type Checking 类型检查&quot;">​</a></h3><h3 id="completeness-完整性" tabindex="-1">Completeness 完整性 <a class="header-anchor" href="#completeness-完整性" aria-label="Permalink to &quot;Completeness 完整性&quot;">​</a></h3><h2 id="ts-node" tabindex="-1">ts-node <a class="header-anchor" href="#ts-node" aria-label="Permalink to &quot;ts-node&quot;">​</a></h2><h2 id="vuecompileroptions" tabindex="-1">vueCompilerOptions <a class="header-anchor" href="#vuecompileroptions" aria-label="Permalink to &quot;vueCompilerOptions&quot;">​</a></h2>`,57),l=[n];function p(r,c,i,d,h,u){return e(),a("div",null,l)}const m=s(t,[["render",p]]);export{y as __pageData,m as default};
